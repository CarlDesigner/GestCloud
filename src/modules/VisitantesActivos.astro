---
// Módulo de Visitantes Activos - GestCloud
import AlertNotification from '../components/AlertNotification.astro';
import ConfirmModal from '../components/ConfirmModal.astro';
---

<div class="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5 dark:bg-gray-800 dark:border-gray-700">
	<div class="w-full mb-1">
		<div class="mb-4">
			<nav class="flex mb-5" aria-label="Breadcrumb">
				<ol class="inline-flex items-center space-x-1 text-sm font-medium md:space-x-2">
					<li class="inline-flex items-center">
						<a href="#" class="inline-flex items-center text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-white">
							<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-home mr-2.5"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9,22 9,12 15,12 15,22"/></svg>
							Visitantes
						</a>
					</li>
					<li>
						<div class="flex items-center">
							<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right w-6 h-6 text-gray-400"><path d="m9 18 6-6-6-6"/></svg>
							<span class="ml-1 text-gray-400 md:ml-2 dark:text-gray-500" aria-current="page">Activos</span>
						</div>
					</li>
				</ol>
			</nav>
			<h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">Visitantes Activos</h1>
			<p class="text-gray-600 dark:text-gray-400 mt-2">Visitantes que se encuentran actualmente dentro del conjunto residencial</p>
		</div>
		
		<!-- Contador de visitantes -->
		<div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
			<div class="flex flex-col sm:flex-row sm:items-center gap-4">
				<div class="bg-primary-50 dark:bg-primary-900/20 rounded-lg p-3">
					<div class="flex items-center">
						<div class="mr-3">
							<div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
						</div>
						<div>
							<p class="text-sm font-medium text-primary-600 dark:text-primary-400">En tiempo real</p>
							<p class="text-xs text-gray-500 dark:text-gray-400">Actualización automática</p>
						</div>
					</div>
				</div>
				<div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-3">
					<div class="text-sm text-gray-600 dark:text-gray-300">
						<span class="hidden sm:inline">Total activos: </span>
						<span class="sm:hidden">Activos: </span>
						<span id="contador-visitantes" class="font-bold text-lg text-gray-900 dark:text-white">0</span>
					</div>
				</div>
			</div>
			
			<!-- Barra de herramientas de visitantes activos mejorada y centrada -->
			<div class="flex flex-col gap-4">
				<!-- Búsqueda centrada -->
				<div class="flex justify-center">
					<div class="relative w-full max-w-md">
						<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search text-gray-400"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.35-4.35"/></svg>
						</div>
						<input type="text" id="buscar-visitante" class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full pl-9 pr-3 py-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 shadow-sm" placeholder="Buscar por nombre, cédula, placa...">
					</div>
				</div>
				
				<!-- Filtros y acciones centrados -->
				<div class="flex flex-wrap items-center justify-center gap-2">
					<span class="text-sm text-gray-500 dark:text-gray-400 hidden lg:inline">Filtrar:</span>
					<button id="filtro-todos" class="filtro-btn active px-3 py-2 text-sm font-medium rounded-lg border transition-all duration-200 border-primary-500 bg-primary-500 text-white shadow-sm hover:shadow-md">
						Todos <span id="contador-todos" class="ml-1 text-xs opacity-90">(0)</span>
					</button>
					<button id="filtro-con-vehiculo" class="filtro-btn px-3 py-2 text-sm font-medium rounded-lg border transition-all duration-200 border-primary-300 dark:border-primary-600 text-primary-600 dark:text-primary-400 bg-transparent hover:bg-primary-50 dark:hover:bg-primary-900/20">
						<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-car inline mr-1"><path d="M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9L18.4 9H5.6L3.5 11.1C2.7 11.3 2 12.1 2 13v3c0 .6.4 1 1 1h2"/><circle cx="7" cy="17" r="2"/><path d="M9 17h6"/><circle cx="17" cy="17" r="2"/></svg>
						<span class="hidden sm:inline">Vehículo</span>
						<span id="contador-con-vehiculo" class="ml-1 text-xs opacity-75">(0)</span>
					</button>
					<button id="filtro-sin-vehiculo" class="filtro-btn px-3 py-2 text-sm font-medium rounded-lg border transition-all duration-200 border-gray-300 dark:border-gray-600 text-gray-600 dark:text-gray-400 bg-transparent hover:bg-gray-50 dark:hover:bg-gray-900/20">
						<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user inline mr-1"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>
						<span class="hidden sm:inline">Peatón</span>
						<span id="contador-sin-vehiculo" class="ml-1 text-xs opacity-75">(0)</span>
					</button>
					<div class="w-px h-6 bg-gray-300 dark:bg-gray-600 hidden sm:block"></div>
					<button id="btn-imprimir-parqueadero" class="px-3 py-2 text-sm font-medium rounded-lg border transition-all duration-200 border-orange-300 dark:border-orange-600 text-orange-600 dark:text-orange-400 bg-transparent hover:bg-orange-50 dark:hover:bg-orange-900/20">
						<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-printer inline mr-1"><polyline points="6,9 6,2 18,2 18,9"/><path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"/><rect x="6" y="14" width="12" height="8"/></svg>
						<span class="hidden sm:inline">Check-in</span>
					</button>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Contenedor de Cards de Visitantes -->
<div class="flex flex-col">
	<div class="overflow-x-auto">
		<div class="inline-block min-w-full align-middle">
			<div class="overflow-hidden shadow">
				<div class="p-4 sm:p-6 bg-white dark:bg-gray-800 min-h-screen">
					
					<!-- Estado sin visitantes -->
					<div id="sin-visitantes" class="text-center py-12 sm:py-16">
						<svg xmlns="http://www.w3.org/2000/svg" width="96" height="96" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-users mx-auto h-16 w-16 sm:h-20 sm:w-20 lg:h-24 lg:w-24 text-gray-400 dark:text-gray-600 mb-4"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="m22 21-2-2"/><path d="m16 11 2 2"/></svg>
						<h3 class="text-base sm:text-lg font-medium text-gray-900 dark:text-white mb-2">No hay visitantes activos</h3>
						<p class="text-sm sm:text-base text-gray-500 dark:text-gray-400 mb-6 px-4">Cuando se registre un visitante aparecerá aquí en tiempo real</p>
						<a href="/inicio" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
							 Registrar Visitante
							 <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user-plus">
											<path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/>
											<circle cx="9" cy="7" r="4"/>
											<line x1="19" x2="19" y1="8" y2="14"/>
											<line x1="22" x2="16" y1="11" y2="11"/>
										</svg>
						</a>
					</div>

					<!-- Grid de Cards de Visitantes -->
					<div id="grid-visitantes" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6">
						<!-- Las cards se generarán dinámicamente aquí -->
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Template para las cards de visitantes -->
<template id="template-card-visitante">
	<div class="visitante-card bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 border border-gray-200 dark:border-gray-700">
		<div class="p-6">
			<!-- Header de la card -->
			<div class="flex items-center justify-between mb-4">
				<div class="flex items-center space-x-3">
					<div class="w-10 h-10 bg-primary-100 dark:bg-primary-900 rounded-full flex items-center justify-center">
						<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user w-5 h-5 text-primary-600 dark:text-primary-400"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>
					</div>
					<div>
						<h3 class="visitante-nombre font-semibold text-lg text-gray-900 dark:text-white"></h3>
						<p class="visitante-cedula text-sm text-gray-500 dark:text-gray-400"></p>
					</div>
				</div>
				<div class="text-right">
					<div class="w-3 h-3 bg-green-500 rounded-full animate-pulse mb-1"></div>
					<span class="text-xs text-green-600 dark:text-green-400 font-medium">Activo</span>
				</div>
			</div>

			<!-- Información del visitante -->
			<div class="space-y-3 mb-6">
				<div class="flex items-center">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-phone w-4 h-4 text-gray-400 mr-2"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"/></svg>
					<span class="visitante-celular text-sm text-gray-700 dark:text-gray-300"></span>
				</div>
				<div class="flex items-center">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-home w-4 h-4 text-gray-400 mr-2"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9,22 9,12 15,12 15,22"/></svg>
					<span class="visitante-apartamento text-sm text-gray-700 dark:text-gray-300"></span>
				</div>
				<div class="flex items-center">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user-check w-4 h-4 text-gray-400 mr-2"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><polyline points="16,11 18,13 22,9"/></svg>
					<span class="visitante-autorizado text-sm text-gray-700 dark:text-gray-300"></span>
				</div>
			</div>

			<!-- Tiempo dentro - Cronómetro -->
			<div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-3 mb-4">
				<div class="flex items-center justify-between">
					<span class="text-sm font-medium text-gray-600 dark:text-gray-400">Tiempo dentro:</span>
					<div class="flex items-center space-x-2">
						<div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
						<span class="visitante-tiempo text-lg font-mono font-semibold text-gray-900 dark:text-white"></span>
					</div>
				</div>
				<div class="text-xs text-gray-500 dark:text-gray-500 mt-1">
					Ingresó: <span class="visitante-hora-entrada"></span>
				</div>
				<!-- Costo acumulado del vehículo (solo si tiene vehículo) -->
				<div class="vehiculo-costo hidden mt-2 pt-2 border-t border-gray-200 dark:border-gray-600">
					<div class="flex items-center justify-between">
						<span class="text-sm text-gray-600 dark:text-gray-400">Costo acumulado:</span>
						<span class="costo-valor text-lg font-semibold text-orange-600 dark:text-orange-400"></span>
					</div>
				</div>
			</div>

			<!-- Información del vehículo (solo si tiene vehículo) -->
			<div class="vehiculo-info hidden bg-blue-50 dark:bg-blue-900/30 rounded-lg p-3 mb-4 border border-blue-200 dark:border-blue-800">
				<div class="flex items-center mb-2">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-car w-4 h-4 text-blue-600 dark:text-blue-400 mr-2"><path d="M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9L18.4 9H5.6L3.5 11.1C2.7 11.3 2 12.1 2 13v3c0 .6.4 1 1 1h2"/><circle cx="7" cy="17" r="2"/><path d="M9 17h6"/><circle cx="17" cy="17" r="2"/></svg>
					<span class="text-sm font-medium text-blue-800 dark:text-blue-200">Vehículo</span>
				</div>
				<div class="space-y-1 text-sm">
					<div class="flex justify-between">
						<span class="text-blue-700 dark:text-blue-300">Tipo:</span>
						<span class="vehiculo-tipo font-medium text-blue-900 dark:text-blue-100"></span>
					</div>
					<div class="flex justify-between">
						<span class="text-blue-700 dark:text-blue-300">Placa:</span>
						<span class="vehiculo-placa font-mono font-medium text-blue-900 dark:text-blue-100"></span>
					</div>
					<div class="flex justify-between">
						<span class="text-blue-700 dark:text-blue-300">Color:</span>
						<span class="vehiculo-color font-medium text-blue-900 dark:text-blue-100"></span>
					</div>
					<div class="flex justify-between">
						<span class="text-blue-700 dark:text-blue-300">Tarifa:</span>
						<span class="vehiculo-tarifa font-medium text-blue-900 dark:text-blue-100"></span>
					</div>
				</div>
			</div>

			<!-- Botón de salida -->
			<button class="btn-dar-salida w-full bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center">
				Dar Salida
				<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-log-out ml-2"><path d="m16 17 5-5-5-5"/><path d="M21 12H9"/><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/></svg>
			</button>
		</div>
	</div>
</template>

<!-- Componente de notificaciones alert -->
<AlertNotification />

<!-- Modal de confirmación de salida -->
<ConfirmModal />

<script>
	// @ts-nocheck
	// Precargar Firebase para mejorar rendimiento
	import '../scripts/firebase-preload';
	
	// Script del cliente para manejar visitantes activos desde Firebase
	import '../scripts/visitantes-activos';
	
	// TEMPORAL: Script de debug para diagnosticar problemas
	import '../scripts/debug-visitantes';

	document.addEventListener('DOMContentLoaded', () => {
		// Elementos del DOM
		const sinVisitantes = document.getElementById('sin-visitantes');
		const gridVisitantes = document.getElementById('grid-visitantes');
		const contadorVisitantes = document.getElementById('contador-visitantes');
		const templateCard = document.getElementById('template-card-visitante');
		const buscarVisitante = document.getElementById('buscar-visitante');
		
		let visitantesActivos = [];
		let visitantesFiltrados = [];
		let filtroActual = 'todos';
		let unsubscribe = null;
		let intervalCronometro = null;
		let isLoading = true;

		// Variables para Fuse.js (búsqueda avanzada)
		let fuse = null;
		let fuseInitialized = false;

		// Configuración de Fuse.js para búsqueda inteligente en visitantes activos
		const fuseOptions = {
			keys: [
				{ name: 'nombre', weight: 0.4 },
				{ name: 'cedula', weight: 0.3 },
				{ name: 'apartamento', weight: 0.2 },
				{ name: 'vehiculo.placa', weight: 0.1 }
			],
			threshold: 0.3,
			includeScore: true,
			minMatchCharLength: 2,
			ignoreLocation: true,
			findAllMatches: true
		};

		// Función para inicializar Fuse.js para visitantes activos
		async function inicializarFuseActivos() {
			if (!fuseInitialized && visitantesActivos.length > 0) {
				try {
					const Fuse = (await import('fuse.js')).default;
					fuse = new Fuse(visitantesActivos, fuseOptions);
					fuseInitialized = true;
				} catch (error) {
					// Fallback a búsqueda simple si falla Fuse.js
					fuse = null;
				}
			}
		}

		// Función de búsqueda para visitantes activos
		function buscarVisitantes(termino) {
			if (!termino || termino.length < 2) {
				return [...visitantesActivos];
			}

			// Si es una búsqueda exacta (cédula o placa), usar método directo
			if (/^\d+$/.test(termino) || /^[A-Z]{3}\d{3}$/.test(termino.toUpperCase())) {
				return visitantesActivos.filter(visitante =>
					visitante.cedula.toString().includes(termino) ||
					(visitante.vehiculo && visitante.vehiculo.placa.toUpperCase().includes(termino.toUpperCase()))
				);
			}

			// Para búsquedas generales, usar Fuse.js si está disponible
			if (fuse) {
				const resultados = fuse.search(termino);
				return resultados.map(resultado => resultado.item);
			}

			// Fallback a búsqueda simple
			const terminoLower = termino.toLowerCase();
			return visitantesActivos.filter(visitante =>
				visitante.nombre.toLowerCase().includes(terminoLower) ||
				visitante.cedula.toString().includes(termino) ||
				visitante.apartamento.toLowerCase().includes(terminoLower) ||
				(visitante.vehiculo && visitante.vehiculo.placa.toLowerCase().includes(terminoLower))
			);
		}

		// Mostrar indicador de carga inicial
		function mostrarCarga() {
			if (sinVisitantes) {
				sinVisitantes.innerHTML = `
					<div class="text-center py-16">
						<div class="inline-block animate-spin rounded-full h-16 w-16 border-b-2 border-primary-600 mb-4"></div>
						<h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Cargando visitantes...</h3>
						<p class="text-gray-500 dark:text-gray-400">Cargando base de datos...</p>
					</div>
				`;
			}
		}

		// Restaurar estado sin visitantes
		function restaurarEstadoVacio() {
			if (sinVisitantes) {
				sinVisitantes.innerHTML = `
					<svg xmlns="http://www.w3.org/2000/svg" width="96" height="96" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-users mx-auto h-24 w-24 text-gray-400 dark:text-gray-600 mb-4">
						<path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="m22 21-2-2"/><path d="m16 11 2 2"/>
					</svg>
					<h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No hay visitantes activos</h3>
					<p class="text-gray-500 dark:text-gray-400 mb-6">Cuando se registre un visitante aparecerá aquí en tiempo real</p>
					<a href="/inicio" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
						 Registrar Visitante &nbsp;<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user-plus">
											<path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/>
											<circle cx="9" cy="7" r="4"/>
											<line x1="19" x2="19" y1="8" y2="14"/>
											<line x1="22" x2="16" y1="11" y2="11"/>
										</svg>
					</a>
				`;
			}
		}

		// Mostrar carga inicial
		mostrarCarga();

		// Función para aplicar filtros con búsqueda mejorada
		function aplicarFiltro() {
			let resultado = [...visitantesActivos];
			
			// Aplicar búsqueda primero si hay términos
			const termino = buscarVisitante?.value?.trim() || '';
			if (termino) {
				resultado = buscarVisitantes(termino);
			}
			
			// Luego aplicar filtro por tipo
			switch(filtroActual) {
				case 'con-vehiculo':
					visitantesFiltrados = resultado.filter(v => v.vehiculo);
					break;
				case 'sin-vehiculo':
					visitantesFiltrados = resultado.filter(v => !v.vehiculo);
					break;
				default:
					visitantesFiltrados = resultado;
			}
			renderizarCards();
		}

		// Función para actualizar contadores de filtros
		function actualizarContadoresFiltros() {
			const totalVisitantes = visitantesActivos.length;
			const conVehiculo = visitantesActivos.filter(v => v.vehiculo).length;
			const sinVehiculo = visitantesActivos.filter(v => !v.vehiculo).length;
			
			// Actualizar contadores en los botones
			const contadorTodos = document.getElementById('contador-todos');
			const contadorConVehiculo = document.getElementById('contador-con-vehiculo');
			const contadorSinVehiculo = document.getElementById('contador-sin-vehiculo');
			
			if (contadorTodos) contadorTodos.textContent = `(${totalVisitantes})`;
			if (contadorConVehiculo) contadorConVehiculo.textContent = `(${conVehiculo})`;
			if (contadorSinVehiculo) contadorSinVehiculo.textContent = `(${sinVehiculo})`;
		}

		// Función para renderizar las cards filtradas
		function renderizarCards() {
			// Actualizar contador principal
			if (contadorVisitantes) {
				contadorVisitantes.textContent = String(visitantesFiltrados.length);
			}
			
			// Actualizar contadores de filtros
			actualizarContadoresFiltros();
			
			if (isLoading) isLoading = false;
			
			if (visitantesFiltrados.length === 0) {
				if (sinVisitantes && gridVisitantes) {
					restaurarEstadoVacio();
					sinVisitantes.classList.remove('hidden');
					gridVisitantes.classList.add('hidden');
				}
			} else if (sinVisitantes && gridVisitantes) {
				sinVisitantes.classList.add('hidden');
				gridVisitantes.classList.remove('hidden');
				gridVisitantes.innerHTML = '';
				
				visitantesFiltrados.forEach(visitante => {
					const card = crearCardVisitante(visitante);
					gridVisitantes.appendChild(card);
				});
			}
		}

		// Event listeners para los filtros
		const filtroTodos = document.getElementById('filtro-todos');
		const filtroConVehiculo = document.getElementById('filtro-con-vehiculo');
		const filtroSinVehiculo = document.getElementById('filtro-sin-vehiculo');

		function actualizarEstadoFiltros() {
			// Remover clases active de todos los botones y aplicar estilo outline
			document.querySelectorAll('.filtro-btn').forEach(btn => {
				btn.classList.remove('active', 'bg-primary-500', 'text-white', 'shadow-md');
				
				// Determinar el color base del botón
				if (btn.id === 'filtro-todos') {
					btn.classList.add('border-primary-300', 'dark:border-primary-600', 'text-primary-600', 'dark:text-primary-400', 'bg-transparent');
					btn.classList.remove('border-primary-500');
				} else if (btn.id === 'filtro-con-vehiculo') {
					btn.classList.add('border-primary-300', 'dark:border-primary-600', 'text-primary-600', 'dark:text-primary-400', 'bg-transparent');
				} else if (btn.id === 'filtro-sin-vehiculo') {
					btn.classList.add('border-gray-300', 'dark:border-gray-600', 'text-gray-600', 'dark:text-gray-400', 'bg-transparent');
				}
			});

			// Aplicar estilo activo al botón seleccionado
			const btnActivo = document.getElementById(`filtro-${filtroActual}`);
			if (btnActivo) {
				btnActivo.classList.add('active', 'shadow-md');
				
				if (filtroActual === 'todos') {
					btnActivo.classList.remove('border-primary-300', 'dark:border-primary-600', 'text-primary-600', 'dark:text-primary-400', 'bg-transparent');
					btnActivo.classList.add('border-primary-500', 'bg-primary-500', 'text-white');
				} else if (filtroActual === 'con-vehiculo') {
					btnActivo.classList.remove('border-primary-300', 'dark:border-primary-600', 'text-primary-600', 'dark:text-primary-400', 'bg-transparent');
					btnActivo.classList.add('border-primary-500', 'bg-primary-500', 'text-white');
				} else if (filtroActual === 'sin-vehiculo') {
					btnActivo.classList.remove('border-gray-300', 'dark:border-gray-600', 'text-gray-600', 'dark:text-gray-400', 'bg-transparent');
					btnActivo.classList.add('border-gray-500', 'bg-gray-500', 'text-white');
				}
			}
		}

		// Configurar event listeners para filtros
		if (filtroTodos) {
			filtroTodos.addEventListener('click', () => {
				filtroActual = 'todos';
				actualizarEstadoFiltros();
				aplicarFiltro();
			});
		}

		// Función para resaltar texto de búsqueda en resultados
		function resaltarTexto(texto, termino) {
			if (!termino || termino.length < 2) {
				return texto;
			}
			
			// Escapar caracteres especiales para regex
			const terminoEscapado = termino.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
			
			// Crear regex con ignorar mayúsculas/minúsculas
			const regex = new RegExp(`(${terminoEscapado})`, 'gi');
			
			// Resaltar el texto con un span amarillo
			return texto.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-600 dark:text-yellow-100 px-1 rounded">$1</mark>');
		}

		// Configurar event listeners para filtros

		if (filtroConVehiculo) {
			filtroConVehiculo.addEventListener('click', () => {
				filtroActual = 'con-vehiculo';
				actualizarEstadoFiltros();
				aplicarFiltro();
			});
		}

		if (filtroSinVehiculo) {
			filtroSinVehiculo.addEventListener('click', () => {
				filtroActual = 'sin-vehiculo';
				actualizarEstadoFiltros();
				aplicarFiltro();
			});
		}


		// Función para capitalizar nombres (primera letra de cada palabra en mayúscula)
		function capitalizarNombre(nombre) {
			return nombre
				.toLowerCase()
				.split(' ')
				.map(palabra => palabra.charAt(0).toUpperCase() + palabra.slice(1))
				.join(' ');
		}

		// Función para formatear cédula con puntos separadores
		function formatearCedula(cedula) {
			const numero = String(cedula).replace(/[^0-9]/g, '');
			// Agregar puntos cada 3 dígitos desde la derecha
			return numero.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
		}

		// Función para formatear celular (formato colombiano)
		function formatearCelular(celular) {
			const numero = String(celular).replace(/[^0-9]/g, '');
			// Formato: 300 123 4567
			if (numero.length === 10) {
				return `${numero.slice(0, 3)} ${numero.slice(3, 6)} ${numero.slice(6)}`;
			}
			return numero;
		}

		// Función para formatear placa con guión (formato colombiano)
		function formatearPlaca(placa) {
			if (!placa) return '';
			const placaLimpia = String(placa).replace(/[^A-Z0-9]/g, '').toUpperCase();
			// Formato: ABC-123
			if (placaLimpia.length === 6) {
				return `${placaLimpia.slice(0, 3)}-${placaLimpia.slice(3)}`;
			}
			return placaLimpia;
		}

		// Función para formatear apartamento
		function formatearApartamento(apartamento) {
			return String(apartamento).toUpperCase();
		}

		// Función para calcular tiempo transcurrido en formato cronómetro
		function calcularTiempo(tiempoEntrada) {
			const ahora = new Date();
			let entrada;
			
			// Manejar diferentes formatos de fecha
			if (tiempoEntrada?.toDate) {
				// Timestamp de Firestore
				entrada = tiempoEntrada.toDate();
			} else if (typeof tiempoEntrada === 'string') {
				// String ISO
				entrada = new Date(tiempoEntrada);
			} else {
				// Fecha normal
				entrada = new Date(tiempoEntrada);
			}
			
			const diferencia = ahora - entrada;
			
			// Calcular horas, minutos y segundos
			const horas = Math.floor(diferencia / (1000 * 60 * 60));
			const minutos = Math.floor((diferencia % (1000 * 60 * 60)) / (1000 * 60));
			const segundos = Math.floor((diferencia % (1000 * 60)) / 1000);
			
			// Formato cronómetro: HH:MM:SS o MM:SS si es menos de una hora
			if (horas > 0) {
				return `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}:${segundos.toString().padStart(2, '0')}`;
			}
			return `${minutos.toString().padStart(2, '0')}:${segundos.toString().padStart(2, '0')}`;
		}

		// Función para formatear fecha/hora
		function formatearFecha(timestamp) {
			let fecha;
			
			if (timestamp?.toDate) {
				fecha = timestamp.toDate();
			} else if (typeof timestamp === 'string') {
				fecha = new Date(timestamp);
			} else {
				fecha = new Date(timestamp);
			}
			
			return fecha.toLocaleString('es-CO', {
				day: '2-digit',
				month: '2-digit',
				year: 'numeric',
				hour: '2-digit',
				minute: '2-digit'
			});
		}

		// Función para crear una card de visitante
		function crearCardVisitante(visitante) {
			const card = templateCard.content.cloneNode(true);
			
			// Obtener término de búsqueda actual para resaltado
			const termino = buscarVisitante?.value?.trim() || '';
			
			// Llenar datos con formato mejorado y resaltado
			card.querySelector('.visitante-nombre').innerHTML = resaltarTexto(capitalizarNombre(visitante.nombre), termino);
			card.querySelector('.visitante-cedula').innerHTML = `CC: ${resaltarTexto(formatearCedula(visitante.cedula), termino)}`;
			card.querySelector('.visitante-celular').innerHTML = resaltarTexto(formatearCelular(visitante.celular), termino);
			card.querySelector('.visitante-apartamento').innerHTML = `Apto: ${resaltarTexto(formatearApartamento(visitante.apartamento), termino)}`;
			card.querySelector('.visitante-autorizado').innerHTML = `Por: ${resaltarTexto(capitalizarNombre(visitante.autorizadoPor), termino)}`;
			card.querySelector('.visitante-tiempo').textContent = calcularTiempo(visitante.tiempoEntrada || visitante.fechaCreacion);
			card.querySelector('.visitante-hora-entrada').textContent = formatearFecha(visitante.tiempoEntrada || visitante.fechaCreacion);
			
			// Manejar información del vehículo
			if (visitante.vehiculo) {
				// Mostrar sección del vehículo
				const vehiculoInfo = card.querySelector('.vehiculo-info');
				const vehiculoCosto = card.querySelector('.vehiculo-costo');
				
				if (vehiculoInfo) {
					vehiculoInfo.classList.remove('hidden');
					card.querySelector('.vehiculo-tipo').innerHTML = resaltarTexto(visitante.vehiculo.tipo.toUpperCase(), termino);
					card.querySelector('.vehiculo-placa').innerHTML = resaltarTexto(formatearPlaca(visitante.vehiculo.placa), termino);
					card.querySelector('.vehiculo-color').innerHTML = resaltarTexto(visitante.vehiculo.color, termino);
					card.querySelector('.vehiculo-tarifa').textContent = `$${visitante.vehiculo.tarifa}/min`;
				}
				
				if (vehiculoCosto) {
					vehiculoCosto.classList.remove('hidden');
					// El costo se actualizará con el cronómetro
					card.querySelector('.costo-valor').textContent = calcularCostoVehiculo(visitante);
				}
			}
			
			// Agregar ID para identificar la card
			card.querySelector('.visitante-card').dataset.visitanteId = visitante.id;
			
			// Evento para el botón de salida
			card.querySelector('.btn-dar-salida').addEventListener('click', async () => {
				// Mostrar modal de confirmación en lugar de ejecutar directamente
				if (window.mostrarConfirmSalida) {
					window.mostrarConfirmSalida(visitante.id, capitalizarNombre(visitante.nombre), ejecutarSalidaVisitante, visitante);
				} else {
					// Fallback si el modal no está disponible
					await ejecutarSalidaVisitante(visitante.id, capitalizarNombre(visitante.nombre));
				}
			});
			
			return card;
		}

		// Función para ejecutar la salida del visitante (llamada después de confirmación)
		async function ejecutarSalidaVisitante(visitanteId, nombre) {
			try {
				// console.log('🚪 Iniciando proceso de salida para:', nombre);
				
				// Deshabilitar botón mientras se procesa
				const card = document.querySelector(`[data-visitante-id="${visitanteId}"]`);
				const button = card?.querySelector('.btn-dar-salida');
				if (button) {
					button.disabled = true;
					button.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-loader-2 animate-spin inline mr-2"><path d="M21 12a9 9 0 11-6.219-8.56"/></svg>Procesando...';
				}
				
				// Verificar que la función existe
				if (!window.darSalidaVisitante) {
					throw new Error('Sistema no inicializado. Recarga la página e intenta nuevamente.');
				}
				
				// Actualizar en Firebase
				const resultado = await window.darSalidaVisitante(visitanteId);
				
				// console.log('✅ Salida exitosa:', resultado);
				
				// Mostrar notificación de éxito con toast
				if (window.mostrarToast) {
					window.mostrarToast(
						`${nombre} ha salido exitosamente. Tiempo: ${resultado.tiempo || 'No disponible'}`, 
						'success', 
						5000
					);
				}
				
			} catch (error) {
				// console.error('❌ Error al dar salida:', error);
				
				// Mostrar notificación de error con toast
				const mensajeError = error.message || 'Error desconocido al dar salida al visitante';
				if (window.mostrarToast) {
					window.mostrarToast(
						`Error: ${mensajeError}`, 
						'error', 
						6000
					);
				}
				
				// Rehabilitar botón en caso de error
				const card = document.querySelector(`[data-visitante-id="${visitanteId}"]`);
				if (card) {
					const button = card.querySelector('.btn-dar-salida');
					if (button) {
						button.disabled = false;
						button.innerHTML = `
							Dar Salida
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-log-out ml-2">
								<path d="m16 17 5-5-5-5"/><path d="M21 12H9"/><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/>
							</svg>
						`;
					}
				}
			}
		}

		// Función para calcular el costo acumulado del vehículo
		function calcularCostoVehiculo(visitante) {
			if (!visitante.vehiculo) return '$0';
			
			const ahora = new Date();
			let entrada;
			
			// Manejar diferentes formatos de fecha
			if (visitante.tiempoEntrada?.toDate) {
				entrada = visitante.tiempoEntrada.toDate();
			} else if (typeof visitante.tiempoEntrada === 'string') {
				entrada = new Date(visitante.tiempoEntrada);
			} else {
				entrada = new Date(visitante.tiempoEntrada || visitante.fechaCreacion);
			}
			
			const diferenciaMilis = ahora - entrada;
			const minutos = Math.floor(diferenciaMilis / (1000 * 60));
			const costo = minutos * visitante.vehiculo.tarifa;
			
			return `$${costo.toLocaleString('es-CO')}`;
		}

		// Función principal de renderizado
		function renderizarVisitantes() {
			aplicarFiltro();
		}

		// Función para actualizar tiempos cada segundo (cronómetro en tiempo real)
		function actualizarTiempos() {
			visitantesActivos.forEach(visitante => {
				const card = document.querySelector(`[data-visitante-id="${visitante.id}"]`);
				if (card) {
					const tiempoElement = card.querySelector('.visitante-tiempo');
					if (tiempoElement) {
						tiempoElement.textContent = calcularTiempo(visitante.tiempoEntrada || visitante.fechaCreacion);
					}

					// Actualizar costo del vehículo si tiene vehículo
					if (visitante.vehiculo) {
						const costoElement = card.querySelector('.costo-valor');
						if (costoElement) {
							costoElement.textContent = calcularCostoVehiculo(visitante);
						}
					}
				}
			});
		}

		// Event listener para el botón de imprimir parqueadero
		const btnImprimirParqueadero = document.getElementById('btn-imprimir-parqueadero');
		if (btnImprimirParqueadero) {
			btnImprimirParqueadero.addEventListener('click', () => {
				// Filtrar solo visitantes con vehículo
				const visitantesConVehiculo = visitantesActivos.filter(visitante => visitante.vehiculo);
				
				if (visitantesConVehiculo.length === 0) {
					if (window.mostrarToast) {
						window.mostrarToast('No hay vehículos activos para imprimir', 'warning');
					}
					return;
				}

				// Crear contenido HTML para imprimir
				const fechaActual = new Date().toLocaleString('es-CO', {
					day: '2-digit',
					month: '2-digit', 
					year: 'numeric',
					hour: '2-digit',
					minute: '2-digit'
				});

				let contenidoHTML = `<!DOCTYPE html><html><head><meta charset="UTF-8"><title>Verificación de Parqueadero - ${fechaActual}</title><style>body{font-family:Arial,sans-serif;margin:20px;color:#000;background:white}.header{text-align:center;margin-bottom:30px;border-bottom:2px solid #333;padding-bottom:15px}.fecha{font-size:14px;color:#666;margin-top:5px}table{width:100%;border-collapse:collapse;margin-top:20px}th,td{border:1px solid #333;padding:8px;text-align:left;font-size:12px}th{background-color:#f5f5f5;font-weight:bold}.verificado{width:60px;text-align:center}.footer{margin-top:30px;text-align:center;font-size:11px;color:#666}@media print{body{margin:0}.no-print{display:none}}</style></head><body><div class="header"><h1>VERIFICACIÓN DE PARQUEADERO</h1><div class="fecha">Generado: ${fechaActual}</div><div class="fecha">Total de vehículos: ${visitantesConVehiculo.length}</div></div><table><thead><tr><th>Placa</th><th>Propietario</th><th>Tipo</th><th>Color</th><th>Hora Entrada</th><th>Tiempo</th><th class="verificado">✓</th></tr></thead><tbody>`;

				// Agregar cada vehículo a la tabla
				visitantesConVehiculo.forEach(visitante => {
					const tiempo = calcularTiempo(visitante.tiempoEntrada || visitante.fechaCreacion);
					const horaEntrada = formatearFecha(visitante.tiempoEntrada || visitante.fechaCreacion);
					
					contenidoHTML += `<tr><td><strong>${formatearPlaca(visitante.vehiculo.placa) || 'N/A'}</strong></td><td>${capitalizarNombre(visitante.nombre)}</td><td>${visitante.vehiculo.tipo || 'N/A'}</td><td>${visitante.vehiculo.color || 'N/A'}</td><td>${horaEntrada}</td><td>${tiempo}</td><td class="verificado"></td></tr>`;
				});

				contenidoHTML += `</tbody></table><div class="footer"><p>Documento generado automáticamente para verificación física del parqueadero</p><p>Marque la columna ✓ al verificar cada vehículo físicamente</p></div></body></html>`;

				// Crear ventana emergente para imprimir
				const ventanaImpresion = window.open('', '_blank');
				ventanaImpresion.document.write(contenidoHTML);
				ventanaImpresion.document.close();
				
				// Esperar a que cargue y luego imprimir automáticamente
				ventanaImpresion.onload = function ventanaImpresionOnload() {
					ventanaImpresion.print();
					setTimeout(() => {
						ventanaImpresion.close();
					}, 1000);
				};
			});
		}

		// Conectar con Firebase para obtener visitantes en tiempo real con Fuse.js
		if (window.escucharVisitantesActivos) {
			unsubscribe = window.escucharVisitantesActivos((visitantes) => {
				visitantesActivos = visitantes;
				
				// Inicializar Fuse.js con los nuevos datos
				inicializarFuseActivos();
				
				renderizarVisitantes();
			});
		} else {
			// Si Firebase no está listo, reintentamos cada 100ms hasta un máximo de 3 segundos
			let intentos = 0;
			const maxIntentos = 30; // 3 segundos / 100ms
			
			const esperarFirebase = setInterval(() => {
				if (window.escucharVisitantesActivos || intentos >= maxIntentos) {
					clearInterval(esperarFirebase);
					
					if (window.escucharVisitantesActivos) {
						unsubscribe = window.escucharVisitantesActivos((visitantes) => {
							visitantesActivos = visitantes;
							renderizarVisitantes();
						});
					} else if (sinVisitantes) {
						// Si después de 3 segundos no hay Firebase, mostrar error
						sinVisitantes.innerHTML = `
							<div class="text-center py-16">
								<svg xmlns="http://www.w3.org/2000/svg" width="96" height="96" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-wifi-off mx-auto h-24 w-24 text-red-400 mb-4">
									<line x1="1" x2="8.5" y1="1" y2="8.5"/><path d="M16.5 10.5c.5-.5 1.2-.5 1.7 0l.6.6c.5.5.5 1.2 0 1.7l-4 4-4-4c-.5-.5-.5-1.2 0-1.7l.6-.6c.5-.5 1.2-.5 1.7 0L12 12l.5-.5z"/><path d="M8.5 8.5A10 10 0 0 1 12 7a10 10 0 0 1 10 10"/><path d="M5 11a7 7 0 0 1 7-7"/>
								</svg>
								<h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Error de conexión</h3>
								<p class="text-gray-500 dark:text-gray-400 mb-6">No se pudo conectar con la base de datos</p>
								<button onclick="location.reload()" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700">
									<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-cw mr-2">
										<path d="m3 12 6-6 6 6"/><path d="M21 12a9 9 0 1 1-9-9 9.75 9.75 0 0 1 7.12 3"/>
									</svg>
									Reintentar
								</button>
							</div>
						`;
					}
				}
				intentos += 1;
			}, 100);
		}

		// Event listener para búsqueda en tiempo real
		if (buscarVisitante) {
			let timeoutId = null;
			
			buscarVisitante.addEventListener('input', () => {
				// Debounce para evitar búsquedas excesivas
				clearTimeout(timeoutId);
				timeoutId = setTimeout(() => {
					aplicarFiltro();
				}, 150);
			});

			// Búsqueda inmediata al presionar Enter
			buscarVisitante.addEventListener('keydown', (e) => {
				if (e.key === 'Enter') {
					clearTimeout(timeoutId);
					aplicarFiltro();
				}
			});
		}

		// Timeout de seguridad: si después de 1 segundo no hay datos, mostrar estado vacío
		setTimeout(() => {
			if (isLoading && visitantesActivos.length === 0) {
				renderizarVisitantes();
			}
		}, 1000);

		// Actualizar cronómetros cada segundo para tiempo real
		intervalCronometro = setInterval(actualizarTiempos, 1000);

		// Cleanup cuando se cierre la página
		window.addEventListener('beforeunload', () => {
			if (unsubscribe) unsubscribe();
			if (intervalCronometro) clearInterval(intervalCronometro);
		});
	});
</script>
