---
/// M√≥dulo de Historial de Visitantes con CRUD - GestCloud
import AlertNotification from '../components/AlertNotification.astro';
---

<div class="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5 dark:bg-gray-800 dark:border-gray-700">
	<div class="w-full mb-1">
		<div class="mb-4">
			<nav class="flex mb-5" aria-label="Breadcrumb">
				<ol class="inline-flex items-center space-x-1 text-sm font-medium md:space-x-2">
					<li class="inline-flex items-center">
						<a href="#" class="inline-flex items-center text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-white">
							<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-home w-5 h-5 mr-2.5"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9,22 9,12 15,12 15,22"/></svg>
							Visitantes
						</a>
					</li>
					<li>
						<div class="flex items-center">
							<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right w-6 h-6 text-gray-400"><path d="m9 18 6-6-6-6"/></svg>
							<span class="ml-1 text-gray-400 md:ml-2 dark:text-gray-500" aria-current="page">Historial</span>
						</div>
					</li>
				</ol>
			</nav>
			<h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">Historial de Visitantes</h1>
			<p class="text-gray-600 dark:text-gray-400 mt-2">Registro de todos los visitantes que han salido del conjunto residencial</p>
		</div>
		
		<!-- Barra de herramientas -->
		<div class="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 p-4">
			<div class="w-full md:w-1/2">
				<form class="flex items-center">
					<label for="simple-search" class="sr-only">Buscar</label>
					<div class="relative w-full">
						<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
							<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search w-5 h-5 text-gray-500 dark:text-gray-400"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.35-4.35"/></svg>
						</div>
						<input type="text" id="table-search" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full pl-10 p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Buscar visitantes...">
					</div>
				</form>
			</div>
			<div class="w-full md:w-auto flex flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0">
				<!-- Filtro con dropdown -->
				<div class="relative">
					<button type="button" id="btn-filtrar" class="flex items-center justify-center px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-filter w-4 h-4 mr-2"><polygon points="22,3 2,3 10,12.46 10,19 14,21 14,12.46"/></svg>
						<span id="filtro-texto">Filtrar</span>
						<span id="filtro-badge" class="hidden ml-2 px-2 py-0.5 text-xs font-medium rounded-full"></span>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-down w-4 h-4 ml-2"><path d="m6 9 6 6 6-6"/></svg>
					</button>
					
					<!-- Dropdown de filtros -->
					<div id="dropdown-filtros" class="hidden absolute right-0 z-50 mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 dark:bg-gray-700 dark:border-gray-600">
						<div class="p-4">
							<h6 class="text-sm font-medium text-gray-900 dark:text-white mb-3">Filtrar por tipo</h6>
							<div class="space-y-2">
								<label class="flex items-center cursor-pointer">
									<input type="radio" name="filtro-historial" value="todos" class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-600 dark:border-gray-500" checked>
									<div class="ml-3 flex items-center">
										<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-users w-4 h-4 mr-2 text-gray-500"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>
										<span class="text-sm text-gray-900 dark:text-white">Todos los visitantes</span>
										<span id="contador-dropdown-todos" class="ml-auto text-xs text-gray-500 bg-gray-100 dark:bg-gray-600 px-2 py-0.5 rounded-full">0</span>
									</div>
								</label>
								<label class="flex items-center cursor-pointer">
									<input type="radio" name="filtro-historial" value="con-vehiculo" class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
									<div class="ml-3 flex items-center">
										<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-car w-4 h-4 mr-2 text-blue-500"><path d="M8 18h8l1.5-6H6.5z"/><path d="M19 18a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"/><path d="M7 18a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"/><path d="M12 3v3"/><path d="M5 12h14l-2-6H7z"/></svg>
										<span class="text-sm text-gray-900 dark:text-white">Con veh√≠culo</span>
										<span id="contador-dropdown-con-vehiculo" class="ml-auto text-xs text-gray-500 bg-gray-100 dark:bg-gray-600 px-2 py-0.5 rounded-full">0</span>
									</div>
								</label>
								<label class="flex items-center cursor-pointer">
									<input type="radio" name="filtro-historial" value="sin-vehiculo" class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
									<div class="ml-3 flex items-center">
										<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user w-4 h-4 mr-2 text-gray-500"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>
										<span class="text-sm text-gray-900 dark:text-white">Sin veh√≠culo</span>
										<span id="contador-dropdown-sin-vehiculo" class="ml-auto text-xs text-gray-500 bg-gray-100 dark:bg-gray-600 px-2 py-0.5 rounded-full">0</span>
									</div>
								</label>
							</div>
							<div class="mt-3 pt-3 border-t border-gray-200 dark:border-gray-600">
								<p class="text-xs text-gray-500 dark:text-gray-400">
									üí° Los filtros afectan la b√∫squeda y exportaci√≥n.
								</p>
							</div>
						</div>
					</div>
				</div>
				<!-- Exportar -->
				<button type="button" id="btn-exportar" class="flex items-center justify-center px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700" title="Exporta los visitantes mostrados seg√∫n los filtros aplicados">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-download w-4 h-4 mr-2"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7,10 12,15 17,10"/><line x1="12" x2="12" y1="15" y2="3"/></svg>
					Exportar
				</button>
				<!-- Ver Activos -->
				<a href="/visitantes-activos" class="flex items-center justify-center px-4 py-2 text-sm font-medium text-white bg-primary-700 rounded-lg hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 focus:outline-none dark:focus:ring-primary-800">
					<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-eye h-3.5 w-3.5 mr-2"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>
					Ver Activos
				</a>
			</div>
		</div>
	</div>
</div>

<!-- Contenedor principal -->
<div class="bg-white dark:bg-gray-800 relative shadow-md sm:rounded-lg overflow-hidden">
	<!-- Estad√≠sticas -->
	<div class="flex items-center justify-between p-4 bg-white dark:bg-gray-800 border-b dark:border-gray-700">
		<div class="flex items-center space-x-6">
			<div class="flex items-center">
				<span id="etiqueta-total" class="text-sm font-medium text-gray-500 dark:text-gray-400">Total registros:</span>
				<span id="total-registros" class="ml-2 text-lg font-bold text-gray-900 dark:text-white">0</span>
			</div>
			<div class="flex items-center">
				<span id="etiqueta-promedio" class="text-sm font-medium text-gray-500 dark:text-gray-400">Promedio permanencia:</span>
				<span id="promedio-permanencia" class="ml-2 text-lg font-bold text-green-600 dark:text-green-400">--</span>
			</div>
		</div>
	</div>
	
	<!-- Estado sin datos -->
		<div id="sin-historial" class="text-center py-16 hidden">
			<svg xmlns="http://www.w3.org/2000/svg" width="96" height="96" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text mx-auto h-24 w-24 text-gray-400 dark:text-gray-600 mb-4"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"/><path d="M14 2v4a2 2 0 0 0 2 2h4"/><path d="M10 9H8"/><path d="M16 13H8"/><path d="M16 17H8"/></svg>
			<h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No hay registros de visitantes</h3>
			<p class="text-gray-500 dark:text-gray-400 mb-6">Cuando los visitantes salgan aparecer√°n aqu√≠</p>
			<a href="/inicio" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700">
	Registrar Visitante &nbsp;
	<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user-plus-icon lucide-user-plus"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><line x1="19" x2="19" y1="8" y2="14"/><line x1="22" x2="16" y1="11" y2="11"/></svg>
			</a>
		</div>

	<!-- Tabla de historial -->
	<div id="tabla-historial" class="overflow-x-auto">
		<table class="w-full text-sm text-left text-gray-500 dark:text-gray-400 table-fixed">
			<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
				<tr>
					<th scope="col" class="px-4 py-3 w-1/5">Visitante</th>
					<th scope="col" class="px-4 py-3 w-1/8">Contacto</th>
					<th scope="col" class="px-4 py-3 w-1/8">Destino</th>
					<th scope="col" class="px-4 py-3 w-1/8">Veh√≠culo</th>
					<th scope="col" class="px-4 py-3 w-1/8">Entrada</th>
					<th scope="col" class="px-4 py-3 w-1/8">Salida</th>
					<th scope="col" class="px-4 py-3 w-1/8">Permanencia</th>
					<th scope="col" class="px-4 py-3 w-16">
						<span class="sr-only">Acciones</span>
					</th>
				</tr>
			</thead>
			<tbody id="tbody-historial">
				<!-- Los datos se cargar√°n din√°micamente aqu√≠ -->
			</tbody>
		</table>
	</div>
	
	<!-- Paginaci√≥n -->
	<nav id="paginacion" class="flex flex-col md:flex-row justify-between items-start md:items-center space-y-3 md:space-y-0 p-4 hidden" aria-label="Table navigation">
		<span class="text-sm font-normal text-gray-500 dark:text-gray-400">
			Mostrando
			<span class="font-semibold text-gray-900 dark:text-white" id="inicio-rango">1</span>
			-
			<span class="font-semibold text-gray-900 dark:text-white" id="fin-rango">10</span>
			de
			<span class="font-semibold text-gray-900 dark:text-white" id="total-items">100</span>
		</span>
		<ul class="inline-flex items-stretch -space-x-px">
			<li>
				<button id="btn-anterior" class="flex items-center justify-center h-full py-1.5 px-3 ml-0 text-gray-500 bg-white rounded-l-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
					<span class="sr-only">Anterior</span>
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left w-5 h-5"><path d="m15 18-6-6 6-6"/></svg>
				</button>
			</li>
			<li>
				<span id="numero-pagina" class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">1</span>
			</li>
			<li>
				<button id="btn-siguiente" class="flex items-center justify-center h-full py-1.5 px-3 leading-tight text-gray-500 bg-white rounded-r-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
					<span class="sr-only">Siguiente</span>
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right w-5 h-5"><path d="m9 18 6-6-6-6"/></svg>
				</button>
			</li>
		</ul>
	</nav>
</div>

<!-- Modal para Ver/Editar Visitante -->
<div id="modal-visitante" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
	<div class="relative w-full max-w-2xl max-h-full">
		<div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
			<!-- Modal header -->
			<div class="flex items-start justify-between p-4 border-b rounded-t dark:border-gray-600">
				<h3 id="modal-titulo" class="text-xl font-semibold text-gray-900 dark:text-white">
					Detalles del Visitante
				</h3>
				<button type="button" id="cerrar-modal" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
					<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x w-3 h-3"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
					<span class="sr-only">Cerrar modal</span>
				</button>
			</div>
			<!-- Modal body -->
			<div class="p-6 space-y-6">
				<form id="form-visitante">
					<div class="grid grid-cols-6 gap-6">
						<div class="col-span-6 sm:col-span-3">
							<label for="nombre" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Nombre completo</label>
							<input type="text" id="nombre" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-600 focus:border-blue-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
						</div>
						<div class="col-span-6 sm:col-span-3">
							<label for="cedula" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">C√©dula</label>
							<input type="text" id="cedula" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-600 focus:border-blue-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
						</div>
						<div class="col-span-6 sm:col-span-3">
							<label for="celular" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Celular</label>
							<input type="text" id="celular" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-600 focus:border-blue-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
						</div>
						<div class="col-span-6 sm:col-span-3">
							<label for="apartamento" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Apartamento</label>
							<input type="text" id="apartamento" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-600 focus:border-blue-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
						</div>
						<div class="col-span-6">
							<label for="autorizadoPor" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Autorizado por</label>
							<input type="text" id="autorizadoPor" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-600 focus:border-blue-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
						</div>
						
						<!-- Informaci√≥n del veh√≠culo (solo mostrar si tiene veh√≠culo) -->
						<div id="vehiculo-section" class="col-span-6 hidden">
							<div class="p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
								<div class="flex items-center mb-3">
									<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-car w-5 h-5 text-blue-600 dark:text-blue-400 mr-2"><path d="M8 18h8l1.5-6H6.5z"/><path d="M19 18a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"/><path d="M7 18a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"/><path d="M12 3v3"/><path d="M5 12h14l-2-6H7z"/></svg>
									<span class="text-sm font-medium text-blue-800 dark:text-blue-200">Informaci√≥n del Veh√≠culo</span>
								</div>
								<div class="grid grid-cols-6 gap-4">
									<div class="col-span-6 sm:col-span-2">
										<label for="vehiculo-tipo" class="block mb-2 text-sm font-medium text-blue-700 dark:text-blue-300">Tipo</label>
										<input type="text" id="vehiculo-tipo" class="bg-blue-50 border border-blue-300 text-blue-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-blue-900/40 dark:border-blue-600 dark:text-blue-100 dark:focus:ring-blue-500 dark:focus:border-blue-500" readonly>
									</div>
									<div class="col-span-6 sm:col-span-2">
										<label for="vehiculo-placa" class="block mb-2 text-sm font-medium text-blue-700 dark:text-blue-300">Placa</label>
										<input type="text" id="vehiculo-placa" class="bg-blue-50 border border-blue-300 text-blue-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-blue-900/40 dark:border-blue-600 dark:text-blue-100 dark:focus:ring-blue-500 dark:focus:border-blue-500" readonly>
									</div>
									<div class="col-span-6 sm:col-span-2">
										<label for="vehiculo-color" class="block mb-2 text-sm font-medium text-blue-700 dark:text-blue-300">Color</label>
										<input type="text" id="vehiculo-color" class="bg-blue-50 border border-blue-300 text-blue-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-blue-900/40 dark:border-blue-600 dark:text-blue-100 dark:focus:ring-blue-500 dark:focus:border-blue-500" readonly>
									</div>
									<div class="col-span-6 sm:col-span-3">
										<label for="vehiculo-tarifa" class="block mb-2 text-sm font-medium text-blue-700 dark:text-blue-300">Tarifa por minuto</label>
										<input type="text" id="vehiculo-tarifa" class="bg-blue-50 border border-blue-300 text-blue-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-blue-900/40 dark:border-blue-600 dark:text-blue-100 dark:focus:ring-blue-500 dark:focus:border-blue-500" readonly>
									</div>
									<div class="col-span-6 sm:col-span-3">
										<label for="vehiculo-costo" class="block mb-2 text-sm font-medium text-orange-700 dark:text-orange-300">Costo Total</label>
										<input type="text" id="vehiculo-costo" class="bg-orange-50 border border-orange-300 text-orange-900 text-sm rounded-lg font-semibold focus:ring-orange-500 focus:border-orange-500 block w-full p-2.5 dark:bg-orange-900/40 dark:border-orange-600 dark:text-orange-100 dark:focus:ring-orange-500 dark:focus:border-orange-500" readonly>
									</div>
								</div>
							</div>
						</div>
					</div>
				</form>
			</div>
			<!-- Modal footer -->
			<div class="flex items-center p-6 space-x-2 border-t border-gray-200 rounded-b dark:border-gray-600">
				<button id="guardar-cambios" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Guardar cambios</button>
				<button id="cancelar-modal" type="button" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">Cancelar</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal de confirmaci√≥n para eliminar -->
<div id="modal-eliminar" tabindex="-1" class="fixed top-0 left-0 right-0 z-50 hidden p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
	<div class="relative w-full max-w-md max-h-full">
		<div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
			<button type="button" id="cerrar-modal-eliminar" class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
				<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x w-3 h-3"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
			</button>
			<div class="p-6 text-center">
				<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-alert-circle mx-auto mb-4 text-gray-400 w-12 h-12 dark:text-gray-200"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="8" y2="12"/><line x1="12" x2="12.01" y1="16" y2="16"/></svg>
				<h3 class="mb-5 text-lg font-normal text-gray-500 dark:text-gray-400">¬øEst√°s seguro de que quieres eliminar este registro?</h3>
				<button id="confirmar-eliminar" type="button" class="text-white bg-red-600 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:focus:ring-red-800 font-medium rounded-lg text-sm inline-flex items-center px-5 py-2.5 text-center mr-2">
					S√≠, eliminar
				</button>
				<button id="cancelar-eliminar" type="button" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">No, cancelar</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal de exportaci√≥n -->
<div id="modal-exportar" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
	<div class="relative w-full max-w-md max-h-full">
		<div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
			<!-- Modal header -->
			<div class="flex items-start justify-between p-4 border-b rounded-t dark:border-gray-600">
				<h3 class="text-xl font-semibold text-gray-900 dark:text-white">
					Exportar Historial
				</h3>
				<button type="button" id="cerrar-modal-exportar" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
					<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x w-3 h-3"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
					<span class="sr-only">Cerrar modal</span>
				</button>
			</div>
			<!-- Modal body -->
			<div class="p-6 space-y-4">
				<p class="text-sm text-gray-500 dark:text-gray-400">
					Selecciona el formato en el que deseas exportar el historial de visitantes:
				</p>
				
				<!-- Opci√≥n PDF -->
				<button id="exportar-pdf" type="button" class="w-full flex items-center justify-center px-4 py-3 text-sm font-medium text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text w-5 h-5 mr-2"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"/><path d="M14 2v4a2 2 0 0 0 2 2h4"/><path d="M10 9H8"/><path d="M16 13H8"/><path d="M16 17H8"/></svg>
					Exportar como PDF
				</button>
				
				<!-- Opci√≥n Excel -->
				<button id="exportar-excel" type="button" class="w-full flex items-center justify-center px-4 py-3 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 focus:ring-4 focus:outline-none focus:ring-green-300 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-table w-5 h-5 mr-2"><path d="M12 3v18"/><rect width="18" height="18" x="3" y="3" rx="2"/><path d="M3 9h18"/><path d="M3 15h18"/></svg>
					Exportar como Excel
				</button>
			</div>
		</div>
	</div>
</div>

<!-- Incluir componente de notificaciones alert -->
<AlertNotification />

<script>
	// @ts-nocheck
	// Precargar Firebase para mejorar rendimiento
	import '../scripts/firebase-preload.js';
	
	// Script del cliente para manejar visitantes activos desde Firebase
	import '../scripts/visitantes-activos.js';

	// Script del cliente para manejar historial de visitantes con CRUD

	document.addEventListener('DOMContentLoaded', () => {
		// Elementos del DOM
		const sinHistorial = document.getElementById('sin-historial');
		const tablaHistorial = document.getElementById('tabla-historial');
		const tbodyHistorial = document.getElementById('tbody-historial');
		const totalRegistros = document.getElementById('total-registros');
		const promedioPermanen = document.getElementById('promedio-permanencia');
		const etiquetaTotal = document.getElementById('etiqueta-total');
		const etiquetaPromedio = document.getElementById('etiqueta-promedio');
		const tableSearch = document.getElementById('table-search');
		
		// Modal elementos
		const modalVisitante = document.getElementById('modal-visitante');
		const modalEliminar = document.getElementById('modal-eliminar');
		const formVisitante = document.getElementById('form-visitante');
		const modalTitulo = document.getElementById('modal-titulo');
		
		// Variables de estado
		let historialVisitantes = [];
		let historialFiltrado = [];
		let unsubscribe = null;
		let visitanteEditando = null;
		let paginaActual = 1;
		const itemsPorPagina = 10;
		
		// Variables para filtros de veh√≠culo
		let filtroHistorialActivo = 'todos'; // todos, con-vehiculo, sin-vehiculo
		let terminoBusqueda = '';
		
		// Elementos de filtros (dropdown)
		const btnFiltrar = document.getElementById('btn-filtrar');
		const dropdownFiltros = document.getElementById('dropdown-filtros');
		const filtroTexto = document.getElementById('filtro-texto');
		const filtroBadge = document.getElementById('filtro-badge');
		const contadorDropdownTodos = document.getElementById('contador-dropdown-todos');
		const contadorDropdownConVehiculo = document.getElementById('contador-dropdown-con-vehiculo');
		const contadorDropdownSinVehiculo = document.getElementById('contador-dropdown-sin-vehiculo');
		const radiosHistorial = document.querySelectorAll('input[name="filtro-historial"]');

		// Funci√≥n para capitalizar nombres
		function capitalizarNombre(nombre) {
			return nombre
				.toLowerCase()
				.split(' ')
				.map(palabra => palabra.charAt(0).toUpperCase() + palabra.slice(1))
				.join(' ');
		}

		// Funci√≥n para formatear c√©dula
		function formatearCedula(cedula) {
			const numero = String(cedula).replace(/[^0-9]/g, '');
			return numero.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
		}

		// Funci√≥n para formatear celular
		function formatearCelular(celular) {
			const numero = String(celular).replace(/[^0-9]/g, '');
			if (numero.length === 10) {
				return `${numero.slice(0, 3)} ${numero.slice(3, 6)} ${numero.slice(6)}`;
			}
			return numero;
		}

		// Funci√≥n para formatear fecha/hora
		function formatearFecha(timestamp) {
			let fecha;
			
			if (timestamp?.toDate) {
				fecha = timestamp.toDate();
			} else if (typeof timestamp === 'string') {
				fecha = new Date(timestamp);
			} else {
				fecha = new Date(timestamp);
			}
			
			return fecha.toLocaleString('es-CO', {
				day: '2-digit',
				month: '2-digit',
				year: 'numeric',
				hour: '2-digit',
				minute: '2-digit'
			});
		}

		// Funci√≥n para calcular duraci√≥n de permanencia
		function calcularDuracion(tiempoEntrada, tiempoSalida) {
			let entrada, salida;
			
			if (tiempoEntrada?.toDate) {
				entrada = tiempoEntrada.toDate();
			} else {
				entrada = new Date(tiempoEntrada);
			}
			
			if (tiempoSalida?.toDate) {
				salida = tiempoSalida.toDate();
			} else {
				salida = new Date(tiempoSalida);
			}
			
			const diferencia = salida - entrada;
			const horas = Math.floor(diferencia / (1000 * 60 * 60));
			const minutos = Math.floor((diferencia % (1000 * 60 * 60)) / (1000 * 60));
			
			if (horas > 0) {
				return `${horas}h ${minutos}m`;
			} else {
				return `${minutos}m`;
			}
		}

		// Funciones auxiliares para manejo de datos de veh√≠culos
		function obtenerInfoVehiculo(visitante) {
			if (!visitante.vehiculo && !visitante.vehiculoFinal) {
				return '-';
			}
			
			const vehiculo = visitante.vehiculoFinal || visitante.vehiculo;
			
			if (!vehiculo) return '-';
			
			const tipo = vehiculo.tipo ? vehiculo.tipo.toUpperCase() : 'VEH√çCULO';
			const placa = vehiculo.placa ? vehiculo.placa.toUpperCase() : '';
			
			return `${tipo} ${placa}`.trim();
		}
		
		// Funci√≥n para obtener costo del veh√≠culo
		function obtenerCostoVehiculo(visitante) {
			if (!visitante.vehiculo && !visitante.vehiculoFinal) {
				return '-';
			}
			
			// Buscar el costo en varias ubicaciones posibles
			let costo = null;
			
			if (visitante.costoVehiculo) {
				costo = visitante.costoVehiculo;
			} else if (visitante.vehiculoFinal?.costoTotal) {
				costo = visitante.vehiculoFinal.costoTotal;
			} else if (visitante.vehiculo?.costoTotal) {
				costo = visitante.vehiculo.costoTotal;
			} else if (visitante.vehiculoFinal?.costo) {
				costo = visitante.vehiculoFinal.costo;
			} else if (visitante.vehiculo?.costo) {
				costo = visitante.vehiculo.costo;
			}
			
			if (costo && costo > 0) {
				return `$${Number(costo).toLocaleString('es-CO')}`;
			}
			
			return '-';
		}

		// Funci√≥n para crear una fila de la tabla
		function crearFilaTabla(visitante) {
			// Generar informaci√≥n del veh√≠culo usando las mismas funciones del PDF
			const infoVehiculo = obtenerInfoVehiculo(visitante);
			const costoVehiculo = obtenerCostoVehiculo(visitante);
			
			let vehiculoInfo = '';
			if (infoVehiculo !== '-') {
				// Separar tipo de veh√≠culo y placa
				const partes = infoVehiculo.split(' ');
				const tipo = partes[0] || 'VEH√çCULO';
				const placa = partes.slice(1).join(' ') || 'Sin placa';
				
				vehiculoInfo = `
					<div class="text-base text-blue-800 dark:text-blue-300 font-medium">${tipo}</div>
					<div class="text-sm text-gray-600 dark:text-gray-400">${placa}</div>
					${costoVehiculo !== '-' ? `<div class="text-xs text-orange-600 dark:text-orange-400 font-semibold">${costoVehiculo}</div>` : ''}
				`;
			} else {
				vehiculoInfo = '<div class="text-sm text-gray-500 dark:text-gray-400">Sin veh√≠culo</div>';
			}

			return `
				<tr class="border-b dark:border-gray-700">
					<td class="px-4 py-3 font-medium text-gray-900 dark:text-white w-1/5">
						<div class="flex items-center">
							<div class="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
								<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user w-5 h-5 text-gray-600"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>
							</div>
							<div class="min-w-0">
								<div class="text-base font-semibold truncate">${capitalizarNombre(visitante.nombre)}</div>
								<div class="font-normal text-gray-500 truncate">CC: ${formatearCedula(visitante.cedula)}</div>
							</div>
						</div>
					</td>
					<td class="px-4 py-3 w-1/8">
						<span class="truncate block">${formatearCelular(visitante.celular)}</span>
					</td>
					<td class="px-4 py-3 w-1/8">
						<div class="text-base truncate">Apto: ${visitante.apartamento.toUpperCase()}</div>
						<div class="text-sm text-gray-500 truncate">Por: ${capitalizarNombre(visitante.autorizadoPor)}</div>
					</td>
					<td class="px-4 py-3 w-1/8">
						${vehiculoInfo}
					</td>
					<td class="px-4 py-3 w-1/8">
						<span class="text-sm truncate block">${formatearFecha(visitante.tiempoEntrada || visitante.fechaCreacion)}</span>
					</td>
					<td class="px-4 py-3 w-1/8">
						<span class="text-sm truncate block">${formatearFecha(visitante.tiempoSalida || visitante.fechaSalida)}</span>
					</td>
					<td class="px-4 py-3 w-1/8">
						<span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300 inline-block">
							${calcularDuracion(visitante.tiempoEntrada || visitante.fechaCreacion, visitante.tiempoSalida || visitante.fechaSalida)}
						</span>
					</td>
					<td class="px-4 py-3 w-16">
						<div class="flex items-center justify-end">
							<button class="inline-flex items-center p-0.5 text-sm font-medium text-center text-gray-500 hover:text-gray-800 rounded-lg focus:outline-none dark:text-gray-400 dark:hover:text-gray-100" onclick="mostrarMenuAcciones(event, '${visitante.id}')">
								<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-more-horizontal w-5 h-5"><circle cx="12" cy="12" r="1"/><circle cx="19" cy="12" r="1"/><circle cx="5" cy="12" r="1"/></svg>
							</button>
						</div>
					</td>
				</tr>
			`;
		}

		// Funci√≥n para mostrar men√∫ de acciones
		window.mostrarMenuAcciones = function(event, visitanteId) {
			event.stopPropagation();
			
			// Verificar si ya existe un men√∫ abierto para este visitante
			const menuExistente = document.querySelector(`.menu-acciones[data-visitante-id="${visitanteId}"]`);
			if (menuExistente) {
				// Si ya est√° abierto, cerrarlo (toggle)
				menuExistente.remove();
				return;
			}
			
			// Remover cualquier otro men√∫ abierto
			document.querySelectorAll('.menu-acciones').forEach(m => m.remove());
			
			// Crear men√∫ contextual
			const menu = document.createElement('div');
			menu.className = 'absolute z-10 w-44 bg-white rounded divide-y divide-gray-100 shadow dark:bg-gray-700 dark:divide-gray-600';
			menu.setAttribute('data-visitante-id', visitanteId); // Para identificar el men√∫
			menu.innerHTML = `
				<ul class="py-1 text-sm text-gray-700 dark:text-gray-200">
					<li>
						<button onclick="verVisitante('${visitanteId}')" class="block w-full text-left py-2 px-4 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
							üëÅÔ∏è Ver detalles
						</button>
					</li>
					<li>
						<button onclick="editarVisitante('${visitanteId}')" class="block w-full text-left py-2 px-4 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
							‚úèÔ∏è Editar
						</button>
					</li>
					<li>
						<button onclick="eliminarVisitante('${visitanteId}')" class="block w-full text-left py-2 px-4 text-red-600 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-red-500">
							üóëÔ∏è Eliminar
						</button>
					</li>
				</ul>
			`;
			
			menu.classList.add('menu-acciones');
			
			// Agregar el men√∫ al DOM temporalmente para obtener sus dimensiones
			menu.style.visibility = 'hidden';
			document.body.appendChild(menu);
			
			// Obtener dimensiones del men√∫ y del viewport
			const menuRect = menu.getBoundingClientRect();
			const buttonRect = event.target.getBoundingClientRect();
			const viewportWidth = window.innerWidth;
			const viewportHeight = window.innerHeight;
			
			// Calcular posici√≥n inteligente
			let top = buttonRect.bottom + 5; // 5px de margen
			let left = buttonRect.left;
			
			// Ajustar si el men√∫ se sale por la derecha
			if (left + menuRect.width > viewportWidth) {
				left = buttonRect.right - menuRect.width;
			}
			
			// Ajustar si el men√∫ se sale por la izquierda
			if (left < 0) {
				left = 10; // Margen m√≠nimo desde el borde izquierdo
			}
			
			// Ajustar si el men√∫ se sale por abajo
			if (top + menuRect.height > viewportHeight) {
				top = buttonRect.top - menuRect.height - 5; // Mostrar arriba del bot√≥n
			}
			
			// Ajustar si el men√∫ se sale por arriba
			if (top < 0) {
				top = 10; // Margen m√≠nimo desde el borde superior
			}
			
			// Aplicar posici√≥n final
			menu.style.position = 'fixed';
			menu.style.top = top + 'px';
			menu.style.left = left + 'px';
			menu.style.visibility = 'visible';
			
			// Funci√≥n para cerrar el men√∫
			function cerrarMenu() {
				menu.remove();
				document.removeEventListener('click', cerrarMenu);
				document.removeEventListener('keydown', manejarTeclaEscape);
			}
			
			// Funci√≥n para manejar la tecla Escape
			function manejarTeclaEscape(event) {
				if (event.key === 'Escape') {
					cerrarMenu();
				}
			}
			
			// Event listeners para cerrar el men√∫
			setTimeout(() => {
				document.addEventListener('click', cerrarMenu);
				document.addEventListener('keydown', manejarTeclaEscape);
			}, 100);
		};

		// Funci√≥n para ver detalles del visitante
		window.verVisitante = function(visitanteId) {
			const visitante = historialVisitantes.find(v => v.id === visitanteId);
			if (visitante) {
				modalTitulo.textContent = 'Detalles del Visitante';
				llenarFormulario(visitante);
				deshabilitarFormulario(true);
				document.getElementById('guardar-cambios').style.display = 'none';
				mostrarModal(modalVisitante);
			}
		};

		// Funci√≥n para editar visitante
		window.editarVisitante = function(visitanteId) {
			const visitante = historialVisitantes.find(v => v.id === visitanteId);
			if (visitante) {
				visitanteEditando = visitante;
				modalTitulo.textContent = 'Editar Visitante';
				llenarFormulario(visitante);
				deshabilitarFormulario(false);
				document.getElementById('guardar-cambios').style.display = 'inline-flex';
				mostrarModal(modalVisitante);
			}
		};

		// Funci√≥n para eliminar visitante
		window.eliminarVisitante = function(visitanteId) {
			visitanteEditando = historialVisitantes.find(v => v.id === visitanteId);
			mostrarModal(modalEliminar);
		};

		// Funci√≥n para llenar formulario
		function llenarFormulario(visitante) {
			// Depuraci√≥n para revisar datos del visitante
			console.log('üîç Llenando formulario para visitante:', visitante);
			console.log('üöó Datos de veh√≠culo disponibles:', {
				vehiculo: visitante.vehiculo,
				vehiculoFinal: visitante.vehiculoFinal,
				costoVehiculo: visitante.costoVehiculo
			});
			
			const nombreEl = document.getElementById('nombre');
			const cedulaEl = document.getElementById('cedula');
			const celularEl = document.getElementById('celular');
			const apartamentoEl = document.getElementById('apartamento');
			const autorizadoPorEl = document.getElementById('autorizadoPor');
			
			if (nombreEl && nombreEl instanceof HTMLInputElement) nombreEl.value = visitante.nombre;
			if (cedulaEl && cedulaEl instanceof HTMLInputElement) cedulaEl.value = visitante.cedula;
			if (celularEl && celularEl instanceof HTMLInputElement) celularEl.value = visitante.celular;
			if (apartamentoEl && apartamentoEl instanceof HTMLInputElement) apartamentoEl.value = visitante.apartamento;
			if (autorizadoPorEl && autorizadoPorEl instanceof HTMLInputElement) autorizadoPorEl.value = visitante.autorizadoPor;
			
			// Manejar informaci√≥n del veh√≠culo
			const vehiculoSection = document.getElementById('vehiculo-section');
			const vehiculo = visitante.vehiculoFinal || visitante.vehiculo;
			
			console.log('üöó Veh√≠culo detectado:', vehiculo);
			
			if (vehiculo && (vehiculo.tipo || vehiculo.placa || vehiculo.color)) {
				// Mostrar secci√≥n del veh√≠culo
				vehiculoSection.classList.remove('hidden');
				
				// Llenar campos del veh√≠culo
				const tipoEl = document.getElementById('vehiculo-tipo');
				const placaEl = document.getElementById('vehiculo-placa');
				const colorEl = document.getElementById('vehiculo-color');
				const tarifaEl = document.getElementById('vehiculo-tarifa');
				const costoEl = document.getElementById('vehiculo-costo');
				
				if (tipoEl && tipoEl instanceof HTMLInputElement) tipoEl.value = vehiculo.tipo ? vehiculo.tipo.toUpperCase() : '';
				if (placaEl && placaEl instanceof HTMLInputElement) placaEl.value = vehiculo.placa || '';
				if (colorEl && colorEl instanceof HTMLInputElement) colorEl.value = vehiculo.color || '';
				if (tarifaEl && tarifaEl instanceof HTMLInputElement) tarifaEl.value = vehiculo.tarifa ? `$${vehiculo.tarifa}/min` : '';
				
				// Mostrar costo total si est√° disponible
				const costoTotal = visitante.costoVehiculo || vehiculo.costoTotal || 0;
				if (costoEl && costoEl instanceof HTMLInputElement) costoEl.value = costoTotal > 0 ? `$${costoTotal.toLocaleString('es-CO')}` : '$0';
				
				console.log('‚úÖ Secci√≥n de veh√≠culo mostrada con datos:', {
					tipo: vehiculo.tipo,
					placa: vehiculo.placa,
					color: vehiculo.color,
					tarifa: vehiculo.tarifa,
					costoTotal: costoTotal
				});
			} else {
				// Ocultar secci√≥n del veh√≠culo
				vehiculoSection.classList.add('hidden');
				console.log('‚ÑπÔ∏è No hay datos de veh√≠culo, ocultando secci√≥n');
			}
		}

		// Funci√≥n para habilitar/deshabilitar formulario
		function deshabilitarFormulario(deshabilitar) {
			const campos = formVisitante.querySelectorAll('input');
			campos.forEach(campo => campo.disabled = deshabilitar);
			
			// Los campos del veh√≠culo siempre son de solo lectura
			const camposVehiculo = document.querySelectorAll('#vehiculo-section input');
			camposVehiculo.forEach(campo => campo.readOnly = true);
		}

		// Funci√≥n para mostrar modal
		function mostrarModal(modal) {
			modal.classList.remove('hidden');
		}

		// Funci√≥n para ocultar modal
		function ocultarModal(modal) {
			modal.classList.add('hidden');
		}

		// Funci√≥n para filtrar visitantes
		function filtrarVisitantes(termino = '') {
			terminoBusqueda = termino;
			aplicarFiltros();
		}
		
		// Funci√≥n principal para aplicar todos los filtros
		function aplicarFiltros() {
			let visitantesFiltrados = [...historialVisitantes];
			
			// Aplicar filtro de veh√≠culo
			switch (filtroHistorialActivo) {
				case 'con-vehiculo':
					visitantesFiltrados = visitantesFiltrados.filter(visitante => 
						visitante.vehiculo || visitante.vehiculoFinal
					);
					break;
				case 'sin-vehiculo':
					visitantesFiltrados = visitantesFiltrados.filter(visitante => 
						!visitante.vehiculo && !visitante.vehiculoFinal
					);
					break;
				case 'todos':
				default:
					// No filtrar por veh√≠culo
					break;
			}
			
			// Aplicar filtro de b√∫squeda de texto
			if (terminoBusqueda.trim()) {
				const terminoLower = terminoBusqueda.toLowerCase();
				visitantesFiltrados = visitantesFiltrados.filter(visitante => 
					visitante.nombre.toLowerCase().includes(terminoLower) ||
					visitante.cedula.includes(terminoBusqueda) ||
					visitante.celular.includes(terminoBusqueda) ||
					visitante.apartamento.toLowerCase().includes(terminoLower) ||
					visitante.autorizadoPor.toLowerCase().includes(terminoLower)
				);
			}
			
			historialFiltrado = visitantesFiltrados;
			paginaActual = 1;
			renderizarTabla();
		}
		
		// Funci√≥n para aplicar filtro de veh√≠culo
		function aplicarFiltroHistorial(filtro) {
			filtroHistorialActivo = filtro;
			actualizarFiltroBadge();
			aplicarFiltros();
		}
		
		// Funci√≥n para actualizar el estado visual del dropdown de filtros
		function actualizarFiltroBadge() {
			const configuracionFiltros = {
				'con-vehiculo': {
					texto: 'Con veh√≠culo',
					clases: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300'
				},
				'sin-vehiculo': {
					texto: 'Sin veh√≠culo', 
					clases: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
				}
			};
			
			// El texto del bot√≥n siempre es "Filtrar"
			if (filtroTexto) {
				filtroTexto.textContent = 'Filtrar';
			}
			
			// Solo mostrar badge cuando hay un filtro activo (no "todos")
			if (filtroBadge) {
				if (filtroHistorialActivo !== 'todos' && configuracionFiltros[filtroHistorialActivo]) {
					const config = configuracionFiltros[filtroHistorialActivo];
					filtroBadge.textContent = config.texto;
					
					// Limpiar clases anteriores y agregar las nuevas
					filtroBadge.className = `ml-2 px-2 py-0.5 text-xs font-medium rounded-full ${config.clases}`;
					filtroBadge.classList.remove('hidden');
				} else {
					filtroBadge.classList.add('hidden');
				}
			}
			
			// Actualizar radio buttons
			radiosHistorial.forEach(radio => {
				radio.checked = radio.value === filtroHistorialActivo;
			});
		}
		
		// Funci√≥n para actualizar los contadores de los filtros
		function actualizarContadoresHistorial() {
			const conVehiculo = historialVisitantes.filter(visitante => 
				visitante.vehiculo || visitante.vehiculoFinal
			).length;
			const sinVehiculo = historialVisitantes.filter(visitante => 
				!visitante.vehiculo && !visitante.vehiculoFinal
			).length;
			const total = historialVisitantes.length;
			
			if (contadorDropdownTodos) contadorDropdownTodos.textContent = String(total);
			if (contadorDropdownConVehiculo) contadorDropdownConVehiculo.textContent = String(conVehiculo);
			if (contadorDropdownSinVehiculo) contadorDropdownSinVehiculo.textContent = String(sinVehiculo);
		}

		// Funci√≥n para calcular estad√≠sticas
		// Funci√≥n para actualizar las etiquetas de estad√≠sticas seg√∫n el filtro activo
		function actualizarEtiquetasEstadisticas() {
			const etiquetas = {
				'todos': {
					total: 'Total registros:',
					promedio: 'Promedio permanencia:'
				},
				'con-vehiculo': {
					total: 'Visitantes con veh√≠culo:',
					promedio: 'Promedio (con veh√≠culo):'
				},
				'sin-vehiculo': {
					total: 'Visitantes sin veh√≠culo:',
					promedio: 'Promedio (sin veh√≠culo):'
				}
			};
			
			const config = etiquetas[filtroHistorialActivo] || etiquetas['todos'];
			
			if (etiquetaTotal) {
				etiquetaTotal.textContent = config.total;
			}
			if (etiquetaPromedio) {
				etiquetaPromedio.textContent = config.promedio;
			}
		}

		function calcularEstadisticas() {
			// Usar historialFiltrado en lugar de historialVisitantes para calcular estad√≠sticas solo de los datos filtrados
			if (historialFiltrado.length === 0) {
				if (promedioPermanen) {
					promedioPermanen.textContent = '--';
				}
				return;
			}
			
			let totalMinutos = 0;
			let visitantesValidos = 0;
			
			historialFiltrado.forEach(visitante => {
				// Validar que tenga datos de entrada y salida
				const tiempoEntradaRaw = visitante.tiempoEntrada || visitante.fechaCreacion;
				const tiempoSalidaRaw = visitante.tiempoSalida || visitante.fechaSalida;
				
				if (!tiempoEntradaRaw || !tiempoSalidaRaw) {
					console.warn('Visitante sin datos completos de tiempo:', visitante.id);
					return; // Saltar este visitante
				}
				
				// Convertir fechas usando la misma l√≥gica que calcularDuracion()
				let entrada, salida;
				
				if (tiempoEntradaRaw?.toDate) {
					entrada = tiempoEntradaRaw.toDate();
				} else {
					entrada = new Date(tiempoEntradaRaw);
				}
				
				if (tiempoSalidaRaw?.toDate) {
					salida = tiempoSalidaRaw.toDate();
				} else {
					salida = new Date(tiempoSalidaRaw);
				}
				
				// Validar que las fechas sean v√°lidas
				if (isNaN(entrada.getTime()) || isNaN(salida.getTime())) {
					console.warn('Fechas inv√°lidas para visitante:', visitante.id, { entrada: tiempoEntradaRaw, salida: tiempoSalidaRaw });
					return; // Saltar este visitante
				}
				
				// Validar que la salida sea posterior a la entrada
				if (salida <= entrada) {
					console.warn('Fecha de salida anterior o igual a entrada:', visitante.id);
					return; // Saltar este visitante
				}
				
				const diferenciaMilis = salida - entrada;
				const minutos = diferenciaMilis / (1000 * 60);
				
				totalMinutos += minutos;
				visitantesValidos++;
			});
			
			if (visitantesValidos === 0) {
				if (promedioPermanen) {
					promedioPermanen.textContent = '--';
				}
				return;
			}
			
			const promedioMinutos = Math.floor(totalMinutos / visitantesValidos);
			const horas = Math.floor(promedioMinutos / 60);
			const minutos = promedioMinutos % 60;
			
			if (promedioPermanen) {
				promedioPermanen.textContent = horas > 0 ? `${horas}h ${minutos}m` : `${minutos}m`;
			}
		}

		// Funci√≥n para renderizar la tabla
		function renderizarTabla() {
			// Actualizar contadores de filtros
			actualizarContadoresHistorial();
			
			// Actualizar etiquetas seg√∫n el filtro activo
			actualizarEtiquetasEstadisticas();
			
			if (totalRegistros) {
				totalRegistros.textContent = String(historialFiltrado.length);
			}
			
			calcularEstadisticas();
			
			if (historialFiltrado.length === 0) {
				if (sinHistorial && tablaHistorial) {
					sinHistorial.classList.remove('hidden');
					tablaHistorial.style.display = 'none';
				}
			} else {
				if (sinHistorial && tablaHistorial && tbodyHistorial) {
					sinHistorial.classList.add('hidden');
					tablaHistorial.style.display = 'table';
					
					// Calcular paginaci√≥n
					const inicio = (paginaActual - 1) * itemsPorPagina;
					const fin = inicio + itemsPorPagina;
					const visitantesPagina = historialFiltrado.slice(inicio, fin);
					
					// Limpiar tabla
					tbodyHistorial.innerHTML = '';
					
					// Agregar cada visitante
					visitantesPagina.forEach(visitante => {
						tbodyHistorial.innerHTML += crearFilaTabla(visitante);
					});
					
					actualizarPaginacion();
				}
			}
		}

		// Funci√≥n para actualizar paginaci√≥n
		function actualizarPaginacion() {
			const totalPaginas = Math.ceil(historialFiltrado.length / itemsPorPagina);
			const paginacion = document.getElementById('paginacion');
			
			if (totalPaginas > 1) {
				paginacion.classList.remove('hidden');
				
				const inicio = (paginaActual - 1) * itemsPorPagina + 1;
				const fin = Math.min(paginaActual * itemsPorPagina, historialFiltrado.length);
				
				document.getElementById('inicio-rango').textContent = inicio;
				document.getElementById('fin-rango').textContent = fin;
				document.getElementById('total-items').textContent = historialFiltrado.length;
				document.getElementById('numero-pagina').textContent = paginaActual;
				
				// Botones de navegaci√≥n
				document.getElementById('btn-anterior').disabled = paginaActual === 1;
				document.getElementById('btn-siguiente').disabled = paginaActual === totalPaginas;
			} else {
				paginacion.classList.add('hidden');
			}
		}

		// Event listeners
		if (tableSearch) {
			tableSearch.addEventListener('input', (e) => {
				filtrarVisitantes(e.target.value);
			});
		}

		// Event listeners para modales
		document.getElementById('cerrar-modal').addEventListener('click', () => {
			ocultarModal(modalVisitante);
		});

		document.getElementById('cancelar-modal').addEventListener('click', () => {
			ocultarModal(modalVisitante);
		});

		document.getElementById('cerrar-modal-eliminar').addEventListener('click', () => {
			ocultarModal(modalEliminar);
		});

		document.getElementById('cancelar-eliminar').addEventListener('click', () => {
			ocultarModal(modalEliminar);
		});
		
		// Event listeners para dropdown de filtros
		if (btnFiltrar) {
			btnFiltrar.addEventListener('click', (e) => {
				e.stopPropagation();
				if (dropdownFiltros) {
					dropdownFiltros.classList.toggle('hidden');
				}
			});
		}
		
		// Cerrar dropdown al hacer click fuera
		document.addEventListener('click', (e) => {
			if (dropdownFiltros && !btnFiltrar?.contains(e.target) && !dropdownFiltros.contains(e.target)) {
				dropdownFiltros.classList.add('hidden');
			}
		});
		
		// Event listeners para radio buttons del filtro
		radiosHistorial.forEach(radio => {
			radio.addEventListener('change', (e) => {
				const { target } = e;
				if (target && target instanceof HTMLInputElement && target.checked) {
					aplicarFiltroHistorial(target.value);
					// Cerrar dropdown despu√©s de seleccionar
					if (dropdownFiltros) {
						dropdownFiltros.classList.add('hidden');
					}
				}
			});
		});

		// Event listeners para modal de exportaci√≥n
		const modalExportar = document.getElementById('modal-exportar');
		
		document.getElementById('btn-exportar').addEventListener('click', () => {
			if (historialFiltrado.length === 0) {
				if (window.mostrarAlert) {
					window.mostrarAlert('No hay datos para exportar', 'warning');
				}
				return;
			}
			mostrarModal(modalExportar);
		});

		document.getElementById('cerrar-modal-exportar').addEventListener('click', () => {
			ocultarModal(modalExportar);
		});

		// Funciones de exportaci√≥n
		async function exportarPDF() {
			try {
				// Verificar que hay datos para exportar
				if (!historialFiltrado || historialFiltrado.length === 0) {
					if (window.mostrarAlert) {
						window.mostrarAlert('No hay datos para exportar con el filtro actual', 'warning');
					}
					return;
				}
				
				// Mostrar indicador de carga
				const btnPDF = document.getElementById('exportar-pdf');
				const textoOriginal = btnPDF.innerHTML;
				btnPDF.innerHTML = `
					<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
						<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
						<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
					</svg>
					Generando PDF...
				`;
				btnPDF.disabled = true;

				// Importar jsPDF y autoTable para tablas profesionales
				const { jsPDF } = await import('jspdf');
				
				// Crear nuevo documento PDF en formato horizontal para m√°ximo aprovechamiento del espacio
				const doc = new jsPDF('landscape', 'mm', 'a4');
				
				// Configuraci√≥n optimizada para m√°ximo aprovechamiento del espacio
				const pageWidth = doc.internal.pageSize.width; // 297mm para A4 landscape
				const pageHeight = doc.internal.pageSize.height; // 210mm para A4 landscape
				const margin = 8; // M√°rgenes m√≠nimos para aprovechar m√°s espacio
				let yPosition = margin;
				
				// T√≠tulo principal compacto pero visible
				doc.setFontSize(14); // Reducido para dar m√°s espacio a los datos
				doc.setFont('helvetica', 'bold');
				doc.setTextColor(44, 82, 130);
				doc.text('HISTORIAL DE VISITANTES - GESTCLOUD', pageWidth / 2, yPosition, { align: 'center' });
				yPosition += 12; // Menos espacio para el t√≠tulo
				
				// Informaci√≥n del reporte m√°s compacta
				doc.setFontSize(9);
				doc.setTextColor(80, 80, 80);
				doc.setFont('helvetica', 'normal');
				const fechaGeneracion = new Date().toLocaleString('es-CO', {
					year: 'numeric',
					month: 'short',
					day: 'numeric',
					hour: '2-digit',
					minute: '2-digit'
				});
				
				// Mostrar informaci√≥n del filtro aplicado
				const infoFiltro = {
					'todos': 'Todos los visitantes',
					'con-vehiculo': 'Solo visitantes con veh√≠culo', 
					'sin-vehiculo': 'Solo visitantes sin veh√≠culo'
				};
				
				// Informaci√≥n en una sola l√≠nea para ahorrar espacio
				const infoLinea = `Generado: ${fechaGeneracion} | Filtro: ${infoFiltro[filtroHistorialActivo] || 'Todos'} | Total: ${historialFiltrado.length} registros`;
				doc.text(infoLinea, pageWidth / 2, yPosition, { align: 'center' });
				yPosition += 10; // Menos espacio entre encabezado y tabla
				
				// Funci√≥n para formatear fecha de forma ultra compacta pero completa
				function formatearFechaPDFCompacta(timestamp) {
					let fecha;
					
					if (timestamp?.toDate) {
						fecha = timestamp.toDate();
					} else if (typeof timestamp === 'string') {
						fecha = new Date(timestamp);
					} else {
						fecha = new Date(timestamp);
					}
					
					// Formato ultra compacto: DD/MM/YY HH:MM
					return fecha.toLocaleString('es-CO', {
						day: '2-digit',
						month: '2-digit',
						year: '2-digit',
						hour: '2-digit',
						minute: '2-digit'
					}).replace(/\s/, ' ');
				}
				
				// Funci√≥n mejorada para obtener info del veh√≠culo COMPLETA
				function obtenerInfoVehiculoCompleta(visitante) {
					if (!visitante.vehiculo && !visitante.vehiculoFinal) {
						return 'Sin veh√≠culo';
					}
					const vehiculo = visitante.vehiculoFinal || visitante.vehiculo;
					const tipo = vehiculo.tipo ? vehiculo.tipo.toUpperCase() : 'VEH√çCULO';
					const placa = vehiculo.placa ? vehiculo.placa.toUpperCase() : 'S/PLACA';
					return `${tipo} - ${placa}`;
				}
				
				// Funci√≥n mejorada para obtener costo COMPLETO
				function obtenerCostoVehiculoCompleto(visitante) {
					if (!visitante.vehiculo && !visitante.vehiculoFinal) {
						return '-';
					}
					
					let costo = null;
					if (visitante.costoVehiculo) {
						costo = visitante.costoVehiculo;
					} else if (visitante.vehiculoFinal?.costoTotal) {
						costo = visitante.vehiculoFinal.costoTotal;
					} else if (visitante.vehiculo?.costoTotal) {
						costo = visitante.vehiculo.costoTotal;
					} else if (visitante.vehiculoFinal?.costo) {
						costo = visitante.vehiculoFinal.costo;
					} else if (visitante.vehiculo?.costo) {
						costo = visitante.vehiculo.costo;
					}
					
					if (costo && costo > 0) {
						return `$${Number(costo).toLocaleString('es-CO')}`;
					}
					return '$0';
				}
				
				// Preparar datos con informaci√≥n COMPLETA y estructura adaptativa seg√∫n filtro
				let tableData, tableHeaders, colWidths;
				
				// CONFIGURACI√ìN ADAPTATIVA DE COLUMNAS SEG√öN EL FILTRO ACTIVO
				if (filtroHistorialActivo === 'sin-vehiculo') {
					// Para visitantes SIN veh√≠culo - NO mostrar columnas de veh√≠culo ni costo
					tableHeaders = ['#', 'Nombre Completo', 'C√©dula', 'Apto', 'Entrada', 'Salida', 'Tiempo', 'Autorizado por'];
					colWidths = [12, 65, 30, 15, 32, 32, 20, 70]; // Total: 276mm - m√°s espacio aprovechado
					
					tableData = historialFiltrado.map((visitante, index) => [
						index + 1,
						capitalizarNombre(visitante.nombre || 'Sin nombre'),
						formatearCedula(visitante.cedula || 'Sin c√©dula'),
						(visitante.apartamento || 'N/A').toString().toUpperCase(),
						formatearFechaPDFCompacta(visitante.tiempoEntrada || visitante.fechaCreacion),
						formatearFechaPDFCompacta(visitante.tiempoSalida || visitante.fechaSalida),
						calcularDuracion(visitante.tiempoEntrada || visitante.fechaCreacion, visitante.tiempoSalida || visitante.fechaSalida),
						capitalizarNombre(visitante.autorizadoPor || 'Sin autorizaci√≥n')
					]);
				} else if (filtroHistorialActivo === 'con-vehiculo') {
					// Para visitantes CON veh√≠culo - mostrar todas las columnas de veh√≠culo
					tableHeaders = ['#', 'Nombre Completo', 'C√©dula', 'Apto', 'Veh√≠culo', 'Entrada', 'Salida', 'Tiempo', 'Costo', 'Autorizado por'];
					colWidths = [10, 45, 24, 12, 35, 27, 27, 16, 20, 65]; // Total: 281mm
					
					tableData = historialFiltrado.map((visitante, index) => [
						index + 1,
						capitalizarNombre(visitante.nombre || 'Sin nombre'),
						formatearCedula(visitante.cedula || 'Sin c√©dula'),
						(visitante.apartamento || 'N/A').toString().toUpperCase(),
						obtenerInfoVehiculoCompleta(visitante),
						formatearFechaPDFCompacta(visitante.tiempoEntrada || visitante.fechaCreacion),
						formatearFechaPDFCompacta(visitante.tiempoSalida || visitante.fechaSalida),
						calcularDuracion(visitante.tiempoEntrada || visitante.fechaCreacion, visitante.tiempoSalida || visitante.fechaSalida),
						obtenerCostoVehiculoCompleto(visitante),
						capitalizarNombre(visitante.autorizadoPor || 'Sin autorizaci√≥n')
					]);
				} else {
					// Para TODOS los visitantes - mostrar todas las columnas pero optimizadas
					tableHeaders = ['#', 'Nombre Completo', 'C√©dula', 'Apto', 'Veh√≠culo', 'Entrada', 'Salida', 'Tiempo', 'Costo', 'Autorizado por'];
					colWidths = [10, 42, 22, 12, 32, 25, 25, 15, 18, 65]; // Total: 266mm
					
					tableData = historialFiltrado.map((visitante, index) => [
						index + 1,
						capitalizarNombre(visitante.nombre || 'Sin nombre'),
						formatearCedula(visitante.cedula || 'Sin c√©dula'),
						(visitante.apartamento || 'N/A').toString().toUpperCase(),
						obtenerInfoVehiculoCompleta(visitante),
						formatearFechaPDFCompacta(visitante.tiempoEntrada || visitante.fechaCreacion),
						formatearFechaPDFCompacta(visitante.tiempoSalida || visitante.fechaSalida),
						calcularDuracion(visitante.tiempoEntrada || visitante.fechaCreacion, visitante.tiempoSalida || visitante.fechaSalida),
						obtenerCostoVehiculoCompleto(visitante),
						capitalizarNombre(visitante.autorizadoPor || 'Sin autorizaci√≥n')
					]);
				}
				
				// Funci√≥n para l√≠neas m√°s delgadas
				function dibujarLineaHorizontal(y, xStart = margin, xEnd = pageWidth - margin) {
					doc.setLineWidth(0.1);
					doc.setDrawColor(200, 200, 200);
					doc.line(xStart, y, xEnd, y);
				}
				
				function dibujarLineaVertical(x, yStart, yEnd) {
					doc.setLineWidth(0.1);
					doc.setDrawColor(200, 200, 200);
					doc.line(x, yStart, x, yEnd);
				}
				
				// Encabezado de tabla m√°s compacto pero legible
				const headerHeight = 10;
				
				// Fondo del encabezado
				doc.setFillColor(245, 245, 245);
				doc.rect(margin, yPosition, pageWidth - 2 * margin, headerHeight, 'F');
				
				// Texto del encabezado PERFECTAMENTE CENTRADO
				doc.setFont('helvetica', 'bold');
				doc.setFontSize(7); // Tama√±o peque√±o pero legible
				doc.setTextColor(40, 40, 40);
				
				let xPos = margin;
				tableHeaders.forEach((header, index) => {
					// CENTRADO PERFECTO del texto del encabezado
					const textWidth = doc.getTextWidth(header);
					const cellCenter = xPos + (colWidths[index] / 2) - (textWidth / 2);
					doc.text(header, cellCenter, yPosition + 6.5);
					xPos += colWidths[index];
				});
				
				dibujarLineaHorizontal(yPosition);
				yPosition += headerHeight;
				dibujarLineaHorizontal(yPosition);
				
				// L√≠neas verticales del encabezado
				xPos = margin;
				for (let i = 0; i <= colWidths.length; i++) {
					dibujarLineaVertical(xPos, yPosition - headerHeight, yPosition);
					if (i < colWidths.length) xPos += colWidths[i];
				}
				
				// Filas de datos optimizadas para mostrar TODO
				doc.setFont('helvetica', 'normal');
				doc.setFontSize(6); // Tama√±o peque√±o pero a√∫n legible
				
				tableData.forEach((row, rowIndex) => {
					const rowHeight = 7; // Altura m√≠nima pero suficiente
					
					// Verificar si necesitamos nueva p√°gina
					if (yPosition + rowHeight > pageHeight - 15) {
						doc.addPage('landscape');
						yPosition = margin;
						
						// Redibujar encabezado PERFECTAMENTE CENTRADO en nueva p√°gina
						doc.setFillColor(245, 245, 245);
						doc.rect(margin, yPosition, pageWidth - 2 * margin, headerHeight, 'F');
						
						doc.setFont('helvetica', 'bold');
						doc.setFontSize(7);
						doc.setTextColor(40, 40, 40);
						xPos = margin;
						tableHeaders.forEach((header, index) => {
							// CENTRADO PERFECTO del texto del encabezado
							const textWidth = doc.getTextWidth(header);
							const cellCenter = xPos + (colWidths[index] / 2) - (textWidth / 2);
							doc.text(header, cellCenter, yPosition + 6.5);
							xPos += colWidths[index];
						});
						
						dibujarLineaHorizontal(yPosition);
						yPosition += headerHeight;
						dibujarLineaHorizontal(yPosition);
						
						xPos = margin;
						for (let i = 0; i <= colWidths.length; i++) {
							dibujarLineaVertical(xPos, yPosition - headerHeight, yPosition);
							if (i < colWidths.length) xPos += colWidths[i];
						}
						
						doc.setFont('helvetica', 'normal');
						doc.setFontSize(6);
					}
					
					// Alternar color de fondo muy sutil
					if (rowIndex % 2 === 0) {
						doc.setFillColor(250, 250, 250);
						doc.rect(margin, yPosition, pageWidth - 2 * margin, rowHeight, 'F');
					}
					
					// Dibujar contenido CON CENTRADO PERFECTO y texto completo
					doc.setTextColor(0, 0, 0);
					xPos = margin + 0.5;
					row.forEach((cellData, cellIndex) => {
						let texto = String(cellData || '-');
						
						// Validar que no sea undefined o null
						if (!texto || texto === 'undefined' || texto === 'null') {
							texto = '-';
						}
						
						// NO TRUNCAR - texto completo siempre visible
						const maxWidth = colWidths[cellIndex] - 2; // Dejar 2mm de margen total
						
						// Para campos cr√≠ticos, asegurar que se vea completo
						let finalText = texto;
						
						// Si el texto es muy largo para la celda, usar tama√±o de fuente ligeramente menor
						const textWidth = doc.getTextWidth(finalText);
						if (textWidth > maxWidth) {
							// Reducir fuente solo para esta celda espec√≠fica
							doc.setFontSize(5.5);
						} else {
							doc.setFontSize(6);
						}
						
						// CENTRADO PERFECTO seg√∫n el tipo de datos
						if (cellIndex === 0) { 
							// # - CENTRADO PERFECTO
							const textWidthFinal = doc.getTextWidth(finalText);
							const cellCenter = xPos + (colWidths[cellIndex] / 2) - (textWidthFinal / 2);
							doc.text(finalText, cellCenter, yPosition + 4.5);
						} else if (cellIndex === 3) { 
							// Apartamento - CENTRADO PERFECTO
							const textWidthFinal = doc.getTextWidth(finalText);
							const cellCenter = xPos + (colWidths[cellIndex] / 2) - (textWidthFinal / 2);
							doc.text(finalText, cellCenter, yPosition + 4.5);
						} else if (cellIndex === 7 || (filtroHistorialActivo === 'sin-vehiculo' && cellIndex === 6)) { 
							// Tiempo - CENTRADO PERFECTO
							const textWidthFinal = doc.getTextWidth(finalText);
							const cellCenter = xPos + (colWidths[cellIndex] / 2) - (textWidthFinal / 2);
							doc.text(finalText, cellCenter, yPosition + 4.5);
						} else if (cellIndex === 8 && filtroHistorialActivo !== 'sin-vehiculo') { 
							// Costo - ALINEADO A LA DERECHA PERFECTO
							const textWidthFinal = doc.getTextWidth(finalText);
							doc.text(finalText, xPos + colWidths[cellIndex] - textWidthFinal - 1, yPosition + 4.5);
						} else if (cellIndex === 2) { 
							// C√©dula - CENTRADO PERFECTO
							const textWidthFinal = doc.getTextWidth(finalText);
							const cellCenter = xPos + (colWidths[cellIndex] / 2) - (textWidthFinal / 2);
							doc.text(finalText, cellCenter, yPosition + 4.5);
						} else {
							// Resto (Nombre, Veh√≠culo, Fechas, Autorizado por) - CENTRADO PERFECTO
							const textWidthFinal = doc.getTextWidth(finalText);
							const cellCenter = xPos + (colWidths[cellIndex] / 2) - (textWidthFinal / 2);
							doc.text(finalText, cellCenter, yPosition + 4.5);
						}
						
						// Restaurar tama√±o de fuente para la siguiente celda
						doc.setFontSize(6);
						xPos += colWidths[cellIndex];
					});
					
					yPosition += rowHeight;
					dibujarLineaHorizontal(yPosition);
					
					// L√≠neas verticales
					xPos = margin;
					for (let i = 0; i <= colWidths.length; i++) {
						dibujarLineaVertical(xPos, yPosition - rowHeight, yPosition);
						if (i < colWidths.length) xPos += colWidths[i];
					}
				});
				
				// AGREGAR FILA DE TOTAL DE COSTOS (solo si hay veh√≠culos)
				if (filtroHistorialActivo !== 'sin-vehiculo') {
					// Calcular el total de todos los costos
					let totalCostos = 0;
					historialFiltrado.forEach(visitante => {
						let costo = 0;
						if (visitante.costoVehiculo) {
							costo = visitante.costoVehiculo;
						} else if (visitante.vehiculoFinal?.costoTotal) {
							costo = visitante.vehiculoFinal.costoTotal;
						} else if (visitante.vehiculo?.costoTotal) {
							costo = visitante.vehiculo.costoTotal;
						} else if (visitante.vehiculoFinal?.costo) {
							costo = visitante.vehiculoFinal.costo;
						} else if (visitante.vehiculo?.costo) {
							costo = visitante.vehiculo.costo;
						}
						
						if (costo && costo > 0) {
							totalCostos += Number(costo);
						}
					});
					
					// Solo agregar fila de total si hay costos
					if (totalCostos > 0) {
						const rowHeight = 8; // Fila un poco m√°s alta para destacar
						
						// Verificar si necesitamos nueva p√°gina
						if (yPosition + rowHeight > pageHeight - 20) {
							doc.addPage('landscape');
							yPosition = margin;
						}
						
						// Fondo destacado para la fila de total
						doc.setFillColor(240, 248, 255); // Azul muy claro
						doc.rect(margin, yPosition, pageWidth - 2 * margin, rowHeight, 'F');
						
						// L√≠nea superior m√°s gruesa
						doc.setLineWidth(0.3);
						doc.setDrawColor(100, 149, 237); // Azul
						doc.line(margin, yPosition, pageWidth - margin, yPosition);
						
						// Texto "TOTAL" en negrita
						doc.setFont('helvetica', 'bold');
						doc.setFontSize(8);
						doc.setTextColor(25, 25, 112); // Azul oscuro
						
						// Posicionar "TOTAL" en la columna antes del costo
						let xPos = margin;
						const columnaCosto = filtroHistorialActivo === 'con-vehiculo' ? 8 : 8; // Posici√≥n de la columna de costo
						
						// Ir hasta la columna anterior al costo
						for (let i = 0; i < columnaCosto; i++) {
							xPos += colWidths[i];
						}
						
						// Escribir "TOTAL:" centrado en la columna anterior
						const textWidth = doc.getTextWidth('TOTAL:');
						const cellCenter = xPos - colWidths[columnaCosto - 1] + (colWidths[columnaCosto - 1] / 2) - (textWidth / 2);
						doc.text('TOTAL:', cellCenter, yPosition + 5.5);
						
						// Escribir el total en la columna de costo
						const totalFormateado = `$${totalCostos.toLocaleString('es-CO')}`;
						doc.setFontSize(9); // Un poco m√°s grande para destacar
						doc.setTextColor(0, 128, 0); // Verde para el total
						
						const totalWidth = doc.getTextWidth(totalFormateado);
						const costoCenter = xPos + (colWidths[columnaCosto] / 2) - (totalWidth / 2);
						doc.text(totalFormateado, costoCenter, yPosition + 5.5);
						
						yPosition += rowHeight;
						
						// L√≠nea inferior
						doc.setLineWidth(0.3);
						doc.line(margin, yPosition, pageWidth - margin, yPosition);
						
						// L√≠neas verticales
						xPos = margin;
						for (let i = 0; i <= colWidths.length; i++) {
							doc.setLineWidth(0.3);
							doc.setDrawColor(100, 149, 237);
							dibujarLineaVertical(xPos, yPosition - rowHeight, yPosition);
							if (i < colWidths.length) xPos += colWidths[i];
						}
						
						// Resetear estilos
						doc.setLineWidth(0.1);
						doc.setDrawColor(200, 200, 200);
					}
				}
				
				// Pie de p√°gina compacto
				yPosition += 5;
				if (yPosition > pageHeight - 12) {
					doc.addPage('landscape');
					yPosition = margin;
				}
				
				doc.setFont('helvetica', 'italic');
				doc.setFontSize(8);
				doc.setTextColor(100, 100, 100);
				
				const infoFooter = filtroHistorialActivo === 'todos' ? 
					`Reporte completo: ${historialFiltrado.length} visitantes` :
					`${infoFiltro[filtroHistorialActivo]}: ${historialFiltrado.length} registros`;
				
				doc.text(infoFooter, margin, yPosition);
				doc.text(`GestCloud ¬© ${new Date().getFullYear()}`, pageWidth - margin - 30, yPosition);
				
				// Guardar el PDF con nombre que incluye el filtro
				const fechaActual = new Date().toLocaleDateString('es-CO').replace(/\//g, '-');
				const sufijo = filtroHistorialActivo === 'todos' ? 'completo' : 
							 filtroHistorialActivo === 'con-vehiculo' ? 'con-vehiculos' : 'sin-vehiculos';
				doc.save(`historial-visitantes-${sufijo}-${fechaActual}.pdf`);
				
				// Restaurar bot√≥n
				btnPDF.innerHTML = textoOriginal;
				btnPDF.disabled = false;
				
				// Cerrar modal y mostrar √©xito con informaci√≥n del total
				ocultarModal(modalExportar);
				if (window.mostrarAlert) {
					// Calcular total para el mensaje
					let totalParaMensaje = 0;
					if (filtroHistorialActivo !== 'sin-vehiculo') {
						historialFiltrado.forEach(visitante => {
							let costo = 0;
							if (visitante.costoVehiculo) {
								costo = visitante.costoVehiculo;
							} else if (visitante.vehiculoFinal?.costoTotal) {
								costo = visitante.vehiculoFinal.costoTotal;
							} else if (visitante.vehiculo?.costoTotal) {
								costo = visitante.vehiculo.costoTotal;
							} else if (visitante.vehiculoFinal?.costo) {
								costo = visitante.vehiculoFinal.costo;
							} else if (visitante.vehiculo?.costo) {
								costo = visitante.vehiculo.costo;
							}
							
							if (costo && costo > 0) {
								totalParaMensaje += Number(costo);
							}
						});
					}
					
					const mensajeExito = totalParaMensaje > 0 ? 
						`PDF exportado exitosamente - Total generado: $${totalParaMensaje.toLocaleString('es-CO')}` :
						'PDF exportado exitosamente con datos completos';
					
					window.mostrarAlert(mensajeExito, 'success');
				}
				
			} catch (error) {
				console.error('Error exportando PDF:', error);
				
				// Restaurar bot√≥n en caso de error
				const btnPDF = document.getElementById('exportar-pdf');
				btnPDF.innerHTML = `
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text w-5 h-5 mr-2"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"/><path d="M14 2v4a2 2 0 0 0 2 2h4"/><path d="M10 9H8"/><path d="M16 13H8"/><path d="M16 17H8"/></svg>
					Exportar como PDF
				`;
				btnPDF.disabled = false;
				
				if (window.mostrarAlert) {
					window.mostrarAlert('Error al generar PDF: ' + error.message, 'error');
				}
			}
		}

		async function exportarExcel() {
			try {
				// Verificar que hay datos para exportar
				if (!historialFiltrado || historialFiltrado.length === 0) {
					if (window.mostrarAlert) {
						window.mostrarAlert('No hay datos para exportar con el filtro actual', 'warning');
					}
					return;
				}
				
				// Mostrar indicador de carga
				const btnExcel = document.getElementById('exportar-excel');
				const textoOriginal = btnExcel.innerHTML;
				btnExcel.innerHTML = `
					<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
						<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
						<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
					</svg>
					Generando Excel...
				`;
				btnExcel.disabled = true;

				// Importar XLSX din√°micamente
				const XLSX = await import('xlsx');
				
				// Preparar datos para Excel con estructura ADAPTATIVA seg√∫n filtro
				let datosExcel;
				
				if (filtroHistorialActivo === 'sin-vehiculo') {
					// Para visitantes SIN veh√≠culo - NO incluir columnas de veh√≠culo ni costo
					datosExcel = historialFiltrado.map((visitante, index) => ({
						'N¬∞': index + 1,
						'Nombre Completo': capitalizarNombre(visitante.nombre || 'Sin nombre'),
						'C√©dula': formatearCedula(visitante.cedula || 'Sin c√©dula'),
						'Apartamento': (visitante.apartamento || 'N/A').toString().toUpperCase(),
						'Fecha de Entrada': formatearFecha(visitante.tiempoEntrada || visitante.fechaCreacion),
						'Fecha de Salida': formatearFecha(visitante.tiempoSalida || visitante.fechaSalida),
						'Tiempo de Permanencia': calcularDuracion(
							visitante.tiempoEntrada || visitante.fechaCreacion,
							visitante.tiempoSalida || visitante.fechaSalida
						),
						'Autorizado por': capitalizarNombre(visitante.autorizadoPor || 'Sin autorizaci√≥n')
					}));
				} else if (filtroHistorialActivo === 'con-vehiculo') {
					// Para visitantes CON veh√≠culo - incluir todas las columnas de veh√≠culo
					datosExcel = historialFiltrado.map((visitante, index) => ({
						'N¬∞': index + 1,
						'Nombre Completo': capitalizarNombre(visitante.nombre || 'Sin nombre'),
						'C√©dula': formatearCedula(visitante.cedula || 'Sin c√©dula'),
						'Apartamento': (visitante.apartamento || 'N/A').toString().toUpperCase(),
						'Veh√≠culo (Tipo y Placa)': obtenerInfoVehiculoCompleta(visitante),
						'Fecha de Entrada': formatearFecha(visitante.tiempoEntrada || visitante.fechaCreacion),
						'Fecha de Salida': formatearFecha(visitante.tiempoSalida || visitante.fechaSalida),
						'Tiempo de Permanencia': calcularDuracion(
							visitante.tiempoEntrada || visitante.fechaCreacion,
							visitante.tiempoSalida || visitante.fechaSalida
						),
						'Costo Veh√≠culo': obtenerCostoVehiculoCompleto(visitante),
						'Autorizado por': capitalizarNombre(visitante.autorizadoPor || 'Sin autorizaci√≥n')
					}));
				} else {
					// Para TODOS los visitantes - incluir todas las columnas
					datosExcel = historialFiltrado.map((visitante, index) => ({
						'N¬∞': index + 1,
						'Nombre Completo': capitalizarNombre(visitante.nombre || 'Sin nombre'),
						'C√©dula': formatearCedula(visitante.cedula || 'Sin c√©dula'),
						'Apartamento': (visitante.apartamento || 'N/A').toString().toUpperCase(),
						'Veh√≠culo (Tipo y Placa)': obtenerInfoVehiculoCompleta(visitante),
						'Fecha de Entrada': formatearFecha(visitante.tiempoEntrada || visitante.fechaCreacion),
						'Fecha de Salida': formatearFecha(visitante.tiempoSalida || visitante.fechaSalida),
						'Tiempo de Permanencia': calcularDuracion(
							visitante.tiempoEntrada || visitante.fechaCreacion,
							visitante.tiempoSalida || visitante.fechaSalida
						),
						'Costo Veh√≠culo': obtenerCostoVehiculoCompleto(visitante),
						'Autorizado por': capitalizarNombre(visitante.autorizadoPor || 'Sin autorizaci√≥n')
					}));
				}
				
				// Crear libro de trabajo
				const libro = XLSX.utils.book_new();
				
				// Crear hoja de c√°lculo
				const hoja = XLSX.utils.json_to_sheet(datosExcel);
				
				// AGREGAR FILA DE TOTAL DE COSTOS (solo si hay veh√≠culos)
				if (filtroHistorialActivo !== 'sin-vehiculo') {
					// Calcular el total de todos los costos
					let totalCostos = 0;
					historialFiltrado.forEach(visitante => {
						let costo = 0;
						if (visitante.costoVehiculo) {
							costo = visitante.costoVehiculo;
						} else if (visitante.vehiculoFinal?.costoTotal) {
							costo = visitante.vehiculoFinal.costoTotal;
						} else if (visitante.vehiculo?.costoTotal) {
							costo = visitante.vehiculo.costoTotal;
						} else if (visitante.vehiculoFinal?.costo) {
							costo = visitante.vehiculoFinal.costo;
						} else if (visitante.vehiculo?.costo) {
							costo = visitante.vehiculo.costo;
						}
						
						if (costo && costo > 0) {
							totalCostos += Number(costo);
						}
					});
					
					// Solo agregar fila de total si hay costos
					if (totalCostos > 0) {
						const totalFormateado = `$${totalCostos.toLocaleString('es-CO')}`;
						
						// Determinar la fila donde agregar el total (despu√©s de los datos + encabezados)
						const filaTotal = datosExcel.length + 6; // 5 filas de info + 1 fila de encabezados + datos
						
						// Crear objeto de total seg√∫n el filtro
						let filaVacia = {};
						let filaTotalObj = {};
						
						if (filtroHistorialActivo === 'con-vehiculo') {
							// Para visitantes CON veh√≠culo
							filaVacia = {
								'N¬∞': '',
								'Nombre Completo': '',
								'C√©dula': '',
								'Apartamento': '',
								'Veh√≠culo (Tipo y Placa)': '',
								'Fecha de Entrada': '',
								'Fecha de Salida': '',
								'Tiempo de Permanencia': '',
								'Costo Veh√≠culo': '',
								'Autorizado por': ''
							};
							
							filaTotalObj = {
								'N¬∞': '',
								'Nombre Completo': '',
								'C√©dula': '',
								'Apartamento': '',
								'Veh√≠culo (Tipo y Placa)': '',
								'Fecha de Entrada': '',
								'Fecha de Salida': '',
								'Tiempo de Permanencia': 'TOTAL:',
								'Costo Veh√≠culo': totalFormateado,
								'Autorizado por': ''
							};
						} else {
							// Para TODOS los visitantes
							filaVacia = {
								'N¬∞': '',
								'Nombre Completo': '',
								'C√©dula': '',
								'Apartamento': '',
								'Veh√≠culo (Tipo y Placa)': '',
								'Fecha de Entrada': '',
								'Fecha de Salida': '',
								'Tiempo de Permanencia': '',
								'Costo Veh√≠culo': '',
								'Autorizado por': ''
							};
							
							filaTotalObj = {
								'N¬∞': '',
								'Nombre Completo': '',
								'C√©dula': '',
								'Apartamento': '',
								'Veh√≠culo (Tipo y Placa)': '',
								'Fecha de Entrada': '',
								'Fecha de Salida': '',
								'Tiempo de Permanencia': 'TOTAL:',
								'Costo Veh√≠culo': totalFormateado,
								'Autorizado por': ''
							};
						}
						
						// Agregar las filas al Excel
						XLSX.utils.sheet_add_json(hoja, [filaVacia, filaTotalObj], { 
							origin: `A${filaTotal}`,
							skipHeader: true 
						});
						
						// Aplicar formato especial a la fila de total
						const cellAddress = XLSX.utils.encode_cell({ r: filaTotal, c: filtroHistorialActivo === 'con-vehiculo' ? 8 : 8 });
						if (!hoja[cellAddress]) hoja[cellAddress] = {};
						hoja[cellAddress].s = {
							font: { bold: true, color: { rgb: "008000" } }, // Verde y negrita
							fill: { fgColor: { rgb: "F0F8FF" } } // Fondo azul claro
						};
						
						// Formato para la celda "TOTAL:"
						const totalLabelAddress = XLSX.utils.encode_cell({ r: filaTotal, c: filtroHistorialActivo === 'con-vehiculo' ? 7 : 7 });
						if (!hoja[totalLabelAddress]) hoja[totalLabelAddress] = {};
						hoja[totalLabelAddress].s = {
							font: { bold: true },
							alignment: { horizontal: "right" }
						};
					}
				}
				
				// Configurar anchos de columna adaptativos seg√∫n el filtro
				let anchosColumna;
				
				if (filtroHistorialActivo === 'sin-vehiculo') {
					// Para visitantes SIN veh√≠culo - sin columnas de veh√≠culo ni costo
					anchosColumna = [
						{ wch: 5 },  // N¬∞
						{ wch: 30 }, // Nombre Completo - m√°s ancho
						{ wch: 15 }, // C√©dula
						{ wch: 12 }, // Apartamento
						{ wch: 22 }, // Fecha Entrada - m√°s ancho
						{ wch: 22 }, // Fecha Salida - m√°s ancho
						{ wch: 20 }, // Permanencia - m√°s ancho
						{ wch: 30 }  // Autorizado por - m√°s ancho
					];
				} else if (filtroHistorialActivo === 'con-vehiculo') {
					// Para visitantes CON veh√≠culo - incluir columnas de veh√≠culo
					anchosColumna = [
						{ wch: 5 },  // N¬∞
						{ wch: 25 }, // Nombre Completo
						{ wch: 15 }, // C√©dula
						{ wch: 12 }, // Apartamento
						{ wch: 30 }, // Veh√≠culo (Tipo y Placa)
						{ wch: 20 }, // Fecha Entrada
						{ wch: 20 }, // Fecha Salida
						{ wch: 18 }, // Permanencia
						{ wch: 15 }, // Costo Veh√≠culo
						{ wch: 25 }  // Autorizado por
					];
				} else {
					// Para TODOS los visitantes - todas las columnas optimizadas
					anchosColumna = [
						{ wch: 5 },  // N¬∞
						{ wch: 25 }, // Nombre Completo
						{ wch: 15 }, // C√©dula
						{ wch: 12 }, // Apartamento
						{ wch: 28 }, // Veh√≠culo (Tipo y Placa)
						{ wch: 20 }, // Fecha Entrada
						{ wch: 20 }, // Fecha Salida
						{ wch: 18 }, // Permanencia
						{ wch: 15 }, // Costo Veh√≠culo
						{ wch: 25 }  // Autorizado por
					];
				}
				
				hoja['!cols'] = anchosColumna;
				
				// Agregar informaci√≥n del reporte con filtro
				const infoFiltroExcel = {
					'todos': 'Todos los visitantes',
					'con-vehiculo': 'Solo visitantes con veh√≠culo', 
					'sin-vehiculo': 'Solo visitantes sin veh√≠culo'
				};
				
				const infoReporte = [
					['HISTORIAL DE VISITANTES - GESTCLOUD'],
					[`Generado el: ${new Date().toLocaleString('es-CO')}`],
					[`Filtro aplicado: ${infoFiltroExcel[filtroHistorialActivo] || 'Todos'}`],
					[`Total de registros: ${historialFiltrado.length}`],
					[''], // Fila vac√≠a
				];
				
				// Insertar informaci√≥n al inicio
				XLSX.utils.sheet_add_aoa(hoja, infoReporte, { origin: 'A1' });
				
				// Mover los datos principales 5 filas hacia abajo
				const range = XLSX.utils.decode_range(hoja['!ref']);
				range.s.r = 5; // Comenzar desde la fila 6 (√≠ndice 5)
				hoja['!ref'] = XLSX.utils.encode_range(range);
				
				// Agregar la hoja al libro
				XLSX.utils.book_append_sheet(libro, hoja, 'Historial Visitantes');
				
				// Generar y descargar archivo con nombre que incluye el filtro
				const fechaActual = new Date().toLocaleDateString('es-CO').replace(/\//g, '-');
				const sufijo = filtroHistorialActivo === 'todos' ? 'completo' : 
							 filtroHistorialActivo === 'con-vehiculo' ? 'con-vehiculos' : 'sin-vehiculos';
				const nombreArchivo = `historial-visitantes-${sufijo}-${fechaActual}.xlsx`;
				
				XLSX.writeFile(libro, nombreArchivo);
				
				// Restaurar bot√≥n
				btnExcel.innerHTML = textoOriginal;
				btnExcel.disabled = false;
				
				// Cerrar modal y mostrar √©xito con informaci√≥n del total
				ocultarModal(modalExportar);
				if (window.mostrarAlert) {
					// Calcular total para el mensaje
					let totalParaMensaje = 0;
					if (filtroHistorialActivo !== 'sin-vehiculo') {
						historialFiltrado.forEach(visitante => {
							let costo = 0;
							if (visitante.costoVehiculo) {
								costo = visitante.costoVehiculo;
							} else if (visitante.vehiculoFinal?.costoTotal) {
								costo = visitante.vehiculoFinal.costoTotal;
							} else if (visitante.vehiculo?.costoTotal) {
								costo = visitante.vehiculo.costoTotal;
							} else if (visitante.vehiculoFinal?.costo) {
								costo = visitante.vehiculoFinal.costo;
							} else if (visitante.vehiculo?.costo) {
								costo = visitante.vehiculo.costo;
							}
							
							if (costo && costo > 0) {
								totalParaMensaje += Number(costo);
							}
						});
					}
					
					const mensajeExito = totalParaMensaje > 0 ? 
						`Excel exportado exitosamente - Total generado: $${totalParaMensaje.toLocaleString('es-CO')}` :
						'Excel exportado exitosamente';
					
					window.mostrarAlert(mensajeExito, 'success');
				}
				
			} catch (error) {
				console.error('Error exportando Excel:', error);
				
				// Restaurar bot√≥n en caso de error
				const btnExcel = document.getElementById('exportar-excel');
				btnExcel.innerHTML = `
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-table w-5 h-5 mr-2"><path d="M12 3v18"/><rect width="18" height="18" x="3" y="3" rx="2"/><path d="M3 9h18"/><path d="M3 15h18"/></svg>
					Exportar como Excel
				`;
				btnExcel.disabled = false;
				
				if (window.mostrarAlert) {
					window.mostrarAlert('Error al generar Excel: ' + error.message, 'error');
				}
			}
		}

		// Conectar botones del modal de exportaci√≥n
		document.getElementById('exportar-pdf').addEventListener('click', exportarPDF);
		document.getElementById('exportar-excel').addEventListener('click', exportarExcel);

		// Guardar cambios
		document.getElementById('guardar-cambios').addEventListener('click', async () => {
			if (visitanteEditando) {
				try {
					const nombreEl = document.getElementById('nombre');
					const cedulaEl = document.getElementById('cedula');
					const celularEl = document.getElementById('celular');
					const apartamentoEl = document.getElementById('apartamento');
					const autorizadoPorEl = document.getElementById('autorizadoPor');
					
					const datosActualizados = {
						nombre: (nombreEl && nombreEl instanceof HTMLInputElement) ? nombreEl.value : '',
						cedula: (cedulaEl && cedulaEl instanceof HTMLInputElement) ? cedulaEl.value : '',
						celular: (celularEl && celularEl instanceof HTMLInputElement) ? celularEl.value : '',
						apartamento: (apartamentoEl && apartamentoEl instanceof HTMLInputElement) ? apartamentoEl.value : '',
						autorizadoPor: (autorizadoPorEl && autorizadoPorEl instanceof HTMLInputElement) ? autorizadoPorEl.value : ''
					};
					
					// Actualizar en Firebase
					const { updateDoc, doc } = await import('firebase/firestore');
					const visitanteRef = doc(window.__firestoreDb, 'visitantes', visitanteEditando.id);
					await updateDoc(visitanteRef, datosActualizados);
					
					ocultarModal(modalVisitante);
					if (window.mostrarAlert) {
						window.mostrarAlert('Visitante actualizado correctamente', 'success');
					}
					
				} catch (error) {
					console.error('Error actualizando visitante:', error);
					if (window.mostrarAlert) {
						window.mostrarAlert('Error al actualizar visitante', 'error');
					}
				}
			}
		});

		// Confirmar eliminaci√≥n
		document.getElementById('confirmar-eliminar').addEventListener('click', async () => {
			if (visitanteEditando) {
				try {
					// Eliminar de Firebase - Eliminaci√≥n definitiva de ambas colecciones
					const { deleteDoc, doc, getDoc } = await import('firebase/firestore');
					
					console.log('üóëÔ∏è Iniciando eliminaci√≥n definitiva del visitante:', visitanteEditando.id);
					
					let eliminacionesExitosas = 0;
					let erroresEliminacion = [];
					
					// 1. Eliminar de la colecci√≥n principal 'visitantes'
					try {
						const visitanteRef = doc(window.__firestoreDb, 'visitantes', visitanteEditando.id);
						const visitanteDoc = await getDoc(visitanteRef);
						
						if (visitanteDoc.exists()) {
							await deleteDoc(visitanteRef);
							console.log('‚úÖ Eliminado de colecci√≥n "visitantes"');
							eliminacionesExitosas++;
						} else {
							console.log('‚ÑπÔ∏è No encontrado en colecci√≥n "visitantes"');
						}
					} catch (error) {
						console.error('‚ùå Error eliminando de "visitantes":', error);
						erroresEliminacion.push(`visitantes: ${error.message}`);
					}
					
					// 2. Eliminar de la colecci√≥n de historial 'visitantes_historial' si existe
					try {
						const historialRef = doc(window.__firestoreDb, 'visitantes_historial', visitanteEditando.id);
						const historialDoc = await getDoc(historialRef);
						
						if (historialDoc.exists()) {
							await deleteDoc(historialRef);
							console.log('‚úÖ Eliminado de colecci√≥n "visitantes_historial"');
							eliminacionesExitosas++;
						} else {
							console.log('‚ÑπÔ∏è No encontrado en colecci√≥n "visitantes_historial"');
						}
					} catch (error) {
						console.error('‚ùå Error eliminando de "visitantes_historial":', error);
						erroresEliminacion.push(`visitantes_historial: ${error.message}`);
					}
					
					ocultarModal(modalEliminar);
					
					// Mostrar resultado de la eliminaci√≥n
					if (eliminacionesExitosas > 0) {
						const mensaje = eliminacionesExitosas === 1 ? 
							'Registro eliminado definitivamente' : 
							`Registro eliminado definitivamente de ${eliminacionesExitosas} ubicaciones`;
						
						if (window.mostrarAlert) {
							window.mostrarAlert(mensaje, 'success');
						}
						
						// Recargar la tabla para reflejar los cambios
						setTimeout(() => {
							window.location.reload();
						}, 2000);
					} else {
						if (window.mostrarAlert) {
							window.mostrarAlert('El registro no se encontr√≥ en ninguna colecci√≥n o ya fue eliminado', 'warning');
						}
					}
					
					if (erroresEliminacion.length > 0) {
						console.warn('‚ö†Ô∏è Algunos errores durante la eliminaci√≥n:', erroresEliminacion);
					}
					
				} catch (error) {
					console.error('Error eliminando visitante:', error);
					if (window.mostrarAlert) {
						window.mostrarAlert('Error al eliminar registro', 'error');
					}
				}
			}
		});

		// Paginaci√≥n
		document.getElementById('btn-anterior').addEventListener('click', () => {
			if (paginaActual > 1) {
				paginaActual--;
				renderizarTabla();
			}
		});

		document.getElementById('btn-siguiente').addEventListener('click', () => {
			const totalPaginas = Math.ceil(historialFiltrado.length / itemsPorPagina);
			if (paginaActual < totalPaginas) {
				paginaActual++;
				renderizarTabla();
			}
		});

		// Inicializar estado del filtro
		actualizarFiltroBadge();

		// Conectar con Firebase para obtener historial
		if (window.escucharHistorialVisitantes) {
			unsubscribe = window.escucharHistorialVisitantes((visitantes) => {
				console.log('üìã Datos del historial recibidos:', visitantes.length, 'visitantes');
				historialVisitantes = visitantes;
				aplicarFiltros(); // Aplicar filtros al cargar datos
				actualizarFiltroBadge(); // Actualizar badge despu√©s de cargar datos
			});
		} else {
			console.error('‚ùå No se encontr√≥ la funci√≥n escucharHistorialVisitantes');
		}

		// Cleanup cuando se cierre la p√°gina
		window.addEventListener('beforeunload', () => {
			if (unsubscribe) unsubscribe();
		});
	});
</script>

<!-- Incluir componente de notificaciones alert -->
<AlertNotification />
