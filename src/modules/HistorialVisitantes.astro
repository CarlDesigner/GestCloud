---
/// Módulo de Historial de Visitantes con CRUD - GestCloud
import AlertNotification from '../components/AlertNotification.astro';
---

<div class="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5 dark:bg-gray-800 dark:border-gray-700">
	<div class="w-full mb-1">
		<div class="mb-4">
			<nav class="flex mb-5" aria-label="Breadcrumb">
				<ol class="inline-flex items-center space-x-1 text-sm font-medium md:space-x-2">
					<li class="inline-flex items-center">
						<a href="#" class="inline-flex items-center text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-white">
							<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-home mr-2.5"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9,22 9,12 15,12 15,22"/></svg>
							Visitantes
						</a>
					</li>
					<li>
						<div class="flex items-center">
							<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right w-6 h-6 text-gray-400"><path d="m9 18 6-6-6-6"/></svg>
							<span class="ml-1 text-gray-400 md:ml-2 dark:text-gray-500" aria-current="page">Historial</span>
						</div>
					</li>
				</ol>
			</nav>
			<h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">Historial de Visitantes</h1>
			<p class="text-gray-600 dark:text-gray-400 mt-2">Registro de todos los visitantes que han salido del conjunto residencial</p>
		</div>
		
		<!-- Barra de herramientas -->
		<div class="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 p-4">
			<div class="w-full md:w-1/2 flex flex-col md:flex-row space-y-2 md:space-y-0 md:space-x-3">
				<!-- Búsqueda por texto -->
				<div class="relative flex-1">
					<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
						<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search w-5 h-5 text-gray-500 dark:text-gray-400"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.35-4.35"/></svg>
					</div>
					<input type="text" id="table-search" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full pl-10 p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Buscar visitantes...">
				</div>
				
				<!-- Filtro por fecha -->
				<div class="relative">
					<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
						<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-calendar w-5 h-5 text-gray-500 dark:text-gray-400"><path d="M8 2v4"/><path d="M16 2v4"/><rect width="18" height="18" x="3" y="4" rx="2"/><path d="M3 10h18"/></svg>
					</div>
					<input 
						type="text" 
						id="datepicker-historial" 
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full pl-10 p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" 
						placeholder="Filtrar por fecha"
						readonly
					>
				</div>
				
				<!-- Botón limpiar filtros -->
				<button type="button" id="btn-limpiar-filtros" class="hidden px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-900 focus:ring-4 focus:ring-gray-200 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700" title="Limpiar filtros">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
				</button>
			</div>
			<div class="w-full md:w-auto flex flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0">
				<!-- Filtro por tipo de visitante -->
				<div class="relative">
					<button type="button" id="btn-filtrar" class="flex items-center justify-center px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-filter w-4 h-4 mr-2"><polygon points="22,3 2,3 10,12.46 10,19 14,21 14,12.46"/></svg>
						Filtrar <span id="filtro-contador" class="hidden ml-1 text-xs bg-primary-600 text-white px-2 py-0.5 rounded-full">0</span>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-down w-4 h-4 ml-1"><path d="m6 9 6 6 6-6"/></svg>
					</button>
					
					<!-- Dropdown de filtros -->
					<div id="dropdown-filtros" class="hidden absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 dark:bg-gray-800 dark:border-gray-700 z-10">
						<div class="p-3">
							<h6 class="text-sm font-medium text-gray-900 dark:text-white mb-3">Filtrar por tipo</h6>
							<ul class="space-y-2">
								<li>
									<label class="flex items-center">
										<input type="radio" name="filtro-tipo" value="todos" checked class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600">
										<span class="ml-2 text-sm text-gray-900 dark:text-white">Todos los visitantes</span>
										<span id="contador-historial-todos" class="ml-auto text-xs text-gray-500 dark:text-gray-400">(0)</span>
									</label>
								</li>
								<li>
									<label class="flex items-center">
										<input type="radio" name="filtro-tipo" value="con-vehiculo" class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600">
										<span class="ml-2 text-sm text-gray-900 dark:text-white">Con vehículo</span>
										<span id="contador-historial-con-vehiculo" class="ml-auto text-xs text-gray-500 dark:text-gray-400">(0)</span>
									</label>
								</li>
								<li>
									<label class="flex items-center">
										<input type="radio" name="filtro-tipo" value="sin-vehiculo" class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600">
										<span class="ml-2 text-sm text-gray-900 dark:text-white">Sin vehículo</span>
										<span id="contador-historial-sin-vehiculo" class="ml-auto text-xs text-gray-500 dark:text-gray-400">(0)</span>
									</label>
								</li>
							</ul>
						</div>
					</div>
				</div>
				<!-- Exportar -->
				<button type="button" id="btn-exportar" class="flex items-center justify-center px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-download w-4 h-4 mr-2"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7,10 12,15 17,10"/><line x1="12" x2="12" y1="15" y2="3"/></svg>
					Exportar
				</button>
				<!-- Ver Activos -->
				<a href="/visitantes-activos" class="flex items-center justify-center px-4 py-2 text-sm font-medium text-white bg-primary-700 rounded-lg hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 focus:outline-none dark:focus:ring-primary-800">
					<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-users h-3.5 w-3.5 mr-2"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>
					Ver Activos
				</a>
			</div>
		</div>
	</div>
</div>

<!-- Contenedor principal -->
<div class="bg-white dark:bg-gray-800 relative shadow-md sm:rounded-lg overflow-hidden">
	<!-- Estadísticas -->
	<div class="flex items-center justify-between p-4 bg-white dark:bg-gray-800 border-b dark:border-gray-700">
		<div class="flex items-center space-x-6">
			<div class="flex items-center">
				<span class="text-sm font-medium text-gray-500 dark:text-gray-400">Total registros:</span>
				<span id="total-registros" class="ml-2 text-lg font-bold text-gray-900 dark:text-white">0</span>
			</div>
			<div class="flex items-center">
				<span class="text-sm font-medium text-gray-500 dark:text-gray-400">Promedio permanencia:</span>
				<span id="promedio-permanencia" class="ml-2 text-lg font-bold text-green-600 dark:text-green-400">--</span>
			</div>
		</div>
	</div>
	
	<!-- Estado sin datos -->
		<div id="sin-historial" class="text-center py-16 hidden">
			<svg xmlns="http://www.w3.org/2000/svg" width="96" height="96" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-clipboard-list mx-auto h-24 w-24 text-gray-400 dark:text-gray-600 mb-4"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"/><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/><path d="M12 11h4"/><path d="M12 16h4"/><path d="M8 11h.01"/><path d="M8 16h.01"/></svg>
			<h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No hay registros de visitantes</h3>
			<p class="text-gray-500 dark:text-gray-400 mb-6">Cuando los visitantes salgan aparecerán aquí</p>
			<a href="/inicio" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700">
	Registrar Visitante &nbsp;
	<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user-plus"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><line x1="19" x2="19" y1="8" y2="14"/><line x1="22" x2="16" y1="11" y2="11"/></svg>
			</a>
		</div>

	<!-- Tabla de historial -->
	<div id="tabla-historial" class="overflow-x-auto">
		<table class="w-full text-sm text-left text-gray-500 dark:text-gray-400 table-fixed">
			<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
				<tr>
					<th scope="col" class="px-4 py-3 w-1/5">Visitante</th>
					<th scope="col" class="px-4 py-3 w-1/8">Contacto</th>
					<th scope="col" class="px-4 py-3 w-1/8">Destino</th>
					<th scope="col" class="px-4 py-3 w-1/6">Vehículo</th>
					<th scope="col" class="px-4 py-3 w-1/8">Costo</th>
					<th scope="col" class="px-4 py-3 w-1/8">Entrada</th>
					<th scope="col" class="px-4 py-3 w-1/8">Salida</th>
					<th scope="col" class="px-4 py-3 w-1/12">Permanencia</th>
					<th scope="col" class="px-4 py-3 w-16">
						<span class="sr-only">Acciones</span>
					</th>
				</tr>
			</thead>
			<tbody id="tbody-historial">
				<!-- Los datos se cargarán dinámicamente aquí -->
			</tbody>
		</table>
	</div>
	
	<!-- Paginación -->
	<nav id="paginacion" class="flex flex-col md:flex-row justify-between items-start md:items-center space-y-3 md:space-y-0 p-4" aria-label="Table navigation">
		<span class="text-sm font-normal text-gray-500 dark:text-gray-400">
			Mostrando
			<span class="font-semibold text-gray-900 dark:text-white" id="inicio-rango">1</span>
			-
			<span class="font-semibold text-gray-900 dark:text-white" id="fin-rango">10</span>
			de
			<span class="font-semibold text-gray-900 dark:text-white" id="total-items">100</span>
		</span>
		<ul class="inline-flex items-stretch -space-x-px">
			<li>
				<button id="btn-anterior" class="flex items-center justify-center h-full py-1.5 px-3 ml-0 text-gray-500 bg-white rounded-l-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
					<span class="sr-only">Anterior</span>
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left w-5 h-5"><path d="m15 18-6-6 6-6"/></svg>
				</button>
			</li>
			<li>
				<span id="numero-pagina" class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">1</span>
			</li>
			<li>
				<button id="btn-siguiente" class="flex items-center justify-center h-full py-1.5 px-3 leading-tight text-gray-500 bg-white rounded-r-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
					<span class="sr-only">Siguiente</span>
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right w-5 h-5"><path d="m9 18 6-6-6-6"/></svg>
				</button>
			</li>
		</ul>
	</nav>
</div>

<!-- Modal para Ver/Editar Visitante -->
<div id="modal-visitante" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
	<div class="relative w-full max-w-2xl max-h-full mx-auto my-auto">
		<div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
			<!-- Modal header -->
			<div class="flex items-start justify-between p-4 border-b rounded-t dark:border-gray-600">
				<h3 id="modal-titulo" class="text-xl font-semibold text-gray-900 dark:text-white">
					Detalles del Visitante
				</h3>
				<button type="button" id="cerrar-modal" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
					<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x w-3 h-3"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
					<span class="sr-only">Cerrar modal</span>
				</button>
			</div>
			<!-- Modal body -->
			<div class="p-6 space-y-6">
				<form id="form-visitante">
					<div class="grid grid-cols-6 gap-6">
						<div class="col-span-6 sm:col-span-3">
							<label for="nombre" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Nombre completo</label>
							<input type="text" id="nombre" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-600 focus:border-blue-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
						</div>
						<div class="col-span-6 sm:col-span-3">
							<label for="cedula" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Cédula</label>
							<input type="text" id="cedula" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-600 focus:border-blue-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
						</div>
						<div class="col-span-6 sm:col-span-3">
							<label for="celular" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Celular</label>
							<input type="text" id="celular" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-600 focus:border-blue-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
						</div>
						<div class="col-span-6 sm:col-span-3">
							<label for="apartamento" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Apartamento</label>
							<input type="text" id="apartamento" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-600 focus:border-blue-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
						</div>
						<div class="col-span-6">
							<label for="autorizadoPor" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Autorizado por</label>
							<input type="text" id="autorizadoPor" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-600 focus:border-blue-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
						</div>
						
						<!-- Información del vehículo (solo visible si el visitante tiene vehículo) -->
						<div id="seccion-vehiculo" class="col-span-6 hidden">
							<!-- Banner azul suave para "Ver detalles" -->
							<div id="banner-vehiculo-ver" class="relative overflow-hidden bg-gradient-to-br from-blue-50 via-indigo-50 to-cyan-50 border border-blue-200 rounded-lg shadow-md p-5 mb-4 hidden dark:from-blue-900/50 dark:via-indigo-900/40 dark:to-cyan-900/30 dark:border-blue-500">
								<div class="flex items-center mb-4">
									<div class="flex items-center justify-center w-10 h-10 bg-blue-500 rounded-lg mr-3 shadow-sm">
										<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-car w-5 h-5 text-white"><path d="M8 19H6a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h6l2 4h4a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2"/><circle cx="7" cy="17" r="2"/><circle cx="17" cy="17" r="2"/></svg>
									</div>
									<h4 class="text-lg font-semibold text-blue-700 dark:text-blue-200">Información del Vehículo</h4>
								</div>
								<div class="grid grid-cols-2 md:grid-cols-4 gap-3">
									<div class="bg-white/80 dark:bg-slate-700/50 rounded-md p-3 border border-slate-200/60 dark:border-slate-600/40">
										<span class="text-xs font-medium text-slate-600 dark:text-slate-400 uppercase tracking-wide block mb-1">Placa</span>
										<p id="vehiculo-placa-ver" class="text-slate-800 dark:text-slate-100 font-semibold text-lg"></p>
									</div>
									<div class="bg-white/80 dark:bg-slate-700/50 rounded-md p-3 border border-slate-200/60 dark:border-slate-600/40">
										<span class="text-xs font-medium text-slate-600 dark:text-slate-400 uppercase tracking-wide block mb-1">Tipo</span>
										<p id="vehiculo-tipo-ver" class="text-slate-800 dark:text-slate-100 font-semibold text-lg capitalize"></p>
									</div>
									<div class="bg-white/80 dark:bg-slate-700/50 rounded-md p-3 border border-slate-200/60 dark:border-slate-600/40">
										<span class="text-xs font-medium text-slate-600 dark:text-slate-400 uppercase tracking-wide block mb-1">Color</span>
										<p id="vehiculo-color-ver" class="text-slate-800 dark:text-slate-100 font-semibold text-lg capitalize"></p>
									</div>
									<div class="bg-white/80 dark:bg-slate-700/50 rounded-md p-3 border border-slate-200/60 dark:border-slate-600/40">
										<span class="text-xs font-medium text-slate-600 dark:text-slate-400 uppercase tracking-wide block mb-1">Costo Total</span>
										<p id="vehiculo-costo-ver" class="text-emerald-600 dark:text-emerald-400 font-semibold text-lg"></p>
									</div>
								</div>
							</div>
							
							<!-- Banner gris-rojizo suave para "Editar" -->
							<div id="banner-vehiculo-editar" class="relative overflow-hidden bg-gradient-to-br from-red-50 via-orange-50 to-rose-50 border border-red-200 rounded-lg shadow-md p-5 mb-4 hidden dark:from-red-900/40 dark:via-orange-900/30 dark:to-rose-900/30 dark:border-red-500">
								<div class="flex items-center justify-between mb-4">
									<div class="flex items-center">
										<div class="flex items-center justify-center w-10 h-10 bg-red-500 rounded-lg mr-3 shadow-sm">
											<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-car w-5 h-5 text-white"><path d="M8 19H6a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h6l2 4h4a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2"/><circle cx="7" cy="17" r="2"/><circle cx="17" cy="17" r="2"/></svg>
										</div>
										<h4 class="text-lg font-semibold text-red-700 dark:text-red-200">Información del Vehículo</h4>
									</div>
									<div class="flex items-center bg-red-100 dark:bg-red-900/30 px-2 py-1 rounded-md">
										<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-lock w-3 h-3 text-red-500 dark:text-red-400 mr-1"><rect width="18" height="11" x="3" y="11" rx="2" ry="2"/><path d="m7 11V7a5 5 0 0 1 10 0v4"/></svg>
										<span class="text-xs font-medium text-red-600 dark:text-red-400">Solo lectura</span>
									</div>
								</div>
								<div class="grid grid-cols-2 md:grid-cols-4 gap-3">
									<div class="bg-white/80 dark:bg-gray-700/50 rounded-md p-3 border border-gray-200/60 dark:border-gray-600/40">
										<span class="text-xs font-medium text-gray-600 dark:text-gray-400 uppercase tracking-wide block mb-1">Placa</span>
										<input type="text" id="vehiculo-placa" disabled class="bg-transparent border-none text-gray-800 dark:text-gray-100 font-semibold text-lg p-0 w-full cursor-not-allowed focus:ring-0" readonly>
									</div>
									<div class="bg-white/80 dark:bg-gray-700/50 rounded-md p-3 border border-gray-200/60 dark:border-gray-600/40">
										<span class="text-xs font-medium text-gray-600 dark:text-gray-400 uppercase tracking-wide block mb-1">Tipo</span>
										<input type="text" id="vehiculo-tipo" disabled class="bg-transparent border-none text-gray-800 dark:text-gray-100 font-semibold text-lg p-0 w-full cursor-not-allowed focus:ring-0 capitalize" readonly>
									</div>
									<div class="bg-white/80 dark:bg-gray-700/50 rounded-md p-3 border border-gray-200/60 dark:border-gray-600/40">
										<span class="text-xs font-medium text-gray-600 dark:text-gray-400 uppercase tracking-wide block mb-1">Color</span>
										<input type="text" id="vehiculo-color" disabled class="bg-transparent border-none text-gray-800 dark:text-gray-100 font-semibold text-lg p-0 w-full cursor-not-allowed focus:ring-0 capitalize" readonly>
									</div>
									<div class="bg-white/80 dark:bg-gray-700/50 rounded-md p-3 border border-gray-200/60 dark:border-gray-600/40">
										<span class="text-xs font-medium text-gray-600 dark:text-gray-400 uppercase tracking-wide block mb-1">Costo Total</span>
										<input type="text" id="vehiculo-costo" disabled class="bg-transparent border-none text-emerald-600 dark:text-emerald-400 font-semibold text-lg p-0 w-full cursor-not-allowed focus:ring-0" readonly>
									</div>
								</div>
							</div>
						</div>
					</div>
				</form>
			</div>
			<!-- Modal footer -->
			<div class="flex items-center p-6 space-x-2 border-t border-gray-200 rounded-b dark:border-gray-600">
				<button id="guardar-cambios" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Guardar cambios</button>
				<button id="cancelar-modal" type="button" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">Cancelar</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal de confirmación para eliminar -->
<div id="modal-eliminar" tabindex="-1" class="fixed top-0 left-0 right-0 z-50 hidden p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
	<div class="relative w-full max-w-md max-h-full mx-auto my-auto">
		<div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
			<button type="button" id="cerrar-modal-eliminar" class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
				<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x w-3 h-3"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
			</button>
			<div class="p-6 text-center">
				<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-alert-circle mx-auto mb-4 text-gray-400 w-12 h-12 dark:text-gray-200"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="8" y2="12"/><line x1="12" x2="12.01" y1="16" y2="16"/></svg>
				<h3 class="mb-5 text-lg font-normal text-gray-500 dark:text-gray-400">¿Estás seguro de que quieres eliminar este registro?</h3>
				<button id="confirmar-eliminar" type="button" class="text-white bg-red-600 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:focus:ring-red-800 font-medium rounded-lg text-sm inline-flex items-center px-5 py-2.5 text-center mr-2">
					Sí, eliminar
				</button>
				<button id="cancelar-eliminar" type="button" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">No, cancelar</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal de exportación -->
<div id="modal-exportar" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
	<div class="relative w-full max-w-md max-h-full mx-auto my-auto">
		<div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
			<!-- Modal header -->
			<div class="flex items-start justify-between p-4 border-b rounded-t dark:border-gray-600">
				<h3 class="text-xl font-semibold text-gray-900 dark:text-white">
					Exportar Historial
				</h3>
				<button type="button" id="cerrar-modal-exportar" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
					<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x w-3 h-3"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
					<span class="sr-only">Cerrar modal</span>
				</button>
			</div>
			<!-- Modal body -->
			<div class="p-6 space-y-4">
				<p class="text-sm text-gray-500 dark:text-gray-400">
					Selecciona el formato en el que deseas exportar el historial de visitantes:
				</p>
				
				<!-- Opción PDF -->
				<button id="exportar-pdf" type="button" class="w-full flex items-center justify-center px-4 py-3 text-sm font-medium text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text w-5 h-5 mr-2"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"/><path d="M14,2 L14,8 L20,8"/><line x1="16" x2="8" y1="13" y2="13"/><line x1="16" x2="8" y1="17" y2="17"/><polyline points="10,9 9,9 8,9"/></svg>
					Exportar como PDF
				</button>
				
				<!-- Opción Excel -->
				<button id="exportar-excel" type="button" class="w-full flex items-center justify-center px-4 py-3 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 focus:ring-4 focus:outline-none focus:ring-green-300 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-spreadsheet w-5 h-5 mr-2"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"/><path d="M14,2 L14,8 L20,8"/><path d="M8 13h2"/><path d="M14 13h2"/><path d="M8 17h2"/><path d="M14 17h2"/></svg>
					Exportar como Excel
				</button>
			</div>
		</div>
	</div>
</div>

<!-- Incluir componente de notificaciones alert -->
<AlertNotification />

<script>
	// @ts-nocheck
	// Precargar Firebase para mejorar rendimiento
	import '../scripts/firebase-preload';
	// Script del cliente para manejar visitantes activos desde Firebase
	import '../scripts/visitantes-activos';

	// Script del cliente para manejar historial de visitantes con CRUD

	document.addEventListener('DOMContentLoaded', () => {
		// Elementos del DOM
		const sinHistorial = document.getElementById('sin-historial');
		const tablaHistorial = document.getElementById('tabla-historial');
		const tbodyHistorial = document.getElementById('tbody-historial');
		const totalRegistros = document.getElementById('total-registros');
		const promedioPermanen = document.getElementById('promedio-permanencia');
		const tableSearch = document.getElementById('table-search');
		const datepickerHistorial = document.getElementById('datepicker-historial');
		const btnLimpiarFiltros = document.getElementById('btn-limpiar-filtros');
		
		// Modal elementos
		const modalVisitante = document.getElementById('modal-visitante');
		const modalEliminar = document.getElementById('modal-eliminar');
		const formVisitante = document.getElementById('form-visitante');
		const modalTitulo = document.getElementById('modal-titulo');
		
		// Variables de estado
		let historialVisitantes = [];
		let historialFiltrado = [];
		let unsubscribe = null;
		let visitanteEditando = null;
		let paginaActual = 1;
		const itemsPorPagina = 10;
		let filtroTipoActual = 'todos'; // Filtro por tipo de visitante
		let fechaFiltroActual = null; // Filtro por fecha

		// Elementos del dropdown de filtros
		const btnFiltrar = document.getElementById('btn-filtrar');
		const dropdownFiltros = document.getElementById('dropdown-filtros');
		const filtroContador = document.getElementById('filtro-contador');

		// Función para actualizar el contador del botón de filtrar
		function actualizarContadorBotonFiltrar() {
			let cantidad = 0;
			let texto = '';
			
			switch(filtroTipoActual) {
				case 'con-vehiculo':
					cantidad = historialVisitantes.filter(v => v.vehiculo).length;
					texto = cantidad.toString();
					break;
				case 'sin-vehiculo':
					cantidad = historialVisitantes.filter(v => !v.vehiculo).length;
					texto = cantidad.toString();
					break;
				default:
					cantidad = historialVisitantes.length;
					texto = cantidad.toString();
			}
			
			if (filtroTipoActual !== 'todos') {
				filtroContador.textContent = texto;
				filtroContador.classList.remove('hidden');
			} else {
				filtroContador.classList.add('hidden');
			}
		}

		// Función para actualizar contadores de filtros en el historial
		function actualizarContadoresFiltrosHistorial() {
			const totalVisitantes = historialVisitantes.length;
			const conVehiculo = historialVisitantes.filter(v => v.vehiculo).length;
			const sinVehiculo = historialVisitantes.filter(v => !v.vehiculo).length;
			
			const contadorTodos = document.getElementById('contador-historial-todos');
			const contadorConVehiculo = document.getElementById('contador-historial-con-vehiculo');
			const contadorSinVehiculo = document.getElementById('contador-historial-sin-vehiculo');
			
			if (contadorTodos) contadorTodos.textContent = `(${totalVisitantes})`;
			if (contadorConVehiculo) contadorConVehiculo.textContent = `(${conVehiculo})`;
			if (contadorSinVehiculo) contadorSinVehiculo.textContent = `(${sinVehiculo})`;
		}

		// Función para aplicar filtro por tipo de visitante
		function aplicarFiltroHistorial() {
			let resultado = [...historialVisitantes];
			
			// Aplicar filtro por tipo
			switch(filtroTipoActual) {
				case 'con-vehiculo':
					resultado = resultado.filter(v => v.vehiculo);
					break;
				case 'sin-vehiculo':
					resultado = resultado.filter(v => !v.vehiculo);
					break;
				default:
					// 'todos' - no filtrar
					break;
			}
			
			// Aplicar filtro por fecha si existe
			if (fechaFiltroActual) {
				resultado = resultado.filter(visitante => {
					// Usar tiempoEntrada en lugar de fechaEntrada
					const fechaCampo = visitante.tiempoEntrada || visitante.tiempoSalida;
					if (!fechaCampo) {
						return false;
					}
					
					let fechaVisitante;
					if (fechaCampo?.toDate) {
						fechaVisitante = fechaCampo.toDate();
					} else {
						fechaVisitante = new Date(fechaCampo);
					}
					
					const fechaVisitanteStr = fechaVisitante.toISOString().split('T')[0];
					return fechaVisitanteStr === fechaFiltroActual;
				});
			}
			
			// Aplicar filtro de búsqueda si existe
			const termino = tableSearch?.value?.toLowerCase() || '';
			if (termino) {
				resultado = resultado.filter(visitante =>
					visitante.nombre.toLowerCase().includes(termino) ||
					visitante.cedula.toString().includes(termino) ||
					visitante.apartamento.toLowerCase().includes(termino) ||
					visitante.autorizadoPor.toLowerCase().includes(termino) ||
					(visitante.vehiculo && visitante.vehiculo.placa.toLowerCase().includes(termino))
				);
			}
			
			historialFiltrado = resultado;
			paginaActual = 1; // Resetear paginación
			renderizarTabla();
			
			// Actualizar contador del botón de filtrar
			actualizarContadorBotonFiltrar();
			
			// Mostrar/ocultar botón de limpiar filtros
			if (fechaFiltroActual || filtroTipoActual !== 'todos' || (tableSearch?.value || '').trim()) {
				btnLimpiarFiltros?.classList.remove('hidden');
			} else {
				btnLimpiarFiltros?.classList.add('hidden');
			}
		}

		// Event listeners para el dropdown de filtros
		if (btnFiltrar && dropdownFiltros) {
			// Toggle dropdown
			btnFiltrar.addEventListener('click', (e) => {
				e.stopPropagation();
				dropdownFiltros.classList.toggle('hidden');
			});

			// Cerrar dropdown al hacer click fuera
			document.addEventListener('click', (e) => {
				if (!dropdownFiltros.contains(e.target) && !btnFiltrar.contains(e.target)) {
					dropdownFiltros.classList.add('hidden');
				}
			});

			// Manejar cambios en los radio buttons
			const radioButtons = dropdownFiltros.querySelectorAll('input[name="filtro-tipo"]');
			radioButtons.forEach(radio => {
				radio.addEventListener('change', (e) => {
					filtroTipoActual = e.target.value;
					aplicarFiltroHistorial();
					dropdownFiltros.classList.add('hidden');
				});
			});
		}

		// Inicializar Flowbite Datepicker
		if (datepickerHistorial) {
			// Configuración del datepicker
			const datepickerConfig = {
				format: 'dd/mm/yyyy',
				maxDate: new Date(),
				autohide: true,
				todayBtn: true,
				clearBtn: true,
				language: 'es',
				title: 'Seleccionar fecha',
				todayBtnText: 'Hoy'
			};

			// Importar y crear instancia del datepicker
			import('flowbite-datepicker').then(({ Datepicker }) => {
				const datepicker = new Datepicker(datepickerHistorial, datepickerConfig);

				// Event listener para cambios en el datepicker
				datepickerHistorial.addEventListener('changeDate', (e) => {
					if (e.detail.date) {
						const fecha = new Date(e.detail.date);
						const [fechaISO] = fecha.toISOString().split('T');
						fechaFiltroActual = fechaISO;
					} else {
						fechaFiltroActual = null;
					}
					aplicarFiltroHistorial();
				});

				// Event listener específico para el botón "Today"
				setTimeout(() => {
					const todayBtn = document.querySelector('.datepicker .today-btn, .datepicker [data-date="today"]');
					if (todayBtn) {
						todayBtn.addEventListener('click', () => {
							const hoy = new Date();
							const [fechaHoy] = hoy.toISOString().split('T');
							fechaFiltroActual = fechaHoy;
							aplicarFiltroHistorial();
						});
					}
				}, 500);

				// Event listener para el botón clear
				setTimeout(() => {
					const clearBtn = document.querySelector('.datepicker .clear-btn, .datepicker [data-date="clear"]');
					if (clearBtn) {
						clearBtn.addEventListener('click', () => {
							fechaFiltroActual = null;
							aplicarFiltroHistorial();
						});
					}
				}, 500);

			}).catch(() => {
				// Error silencioso - el datepicker seguirá funcionando sin funcionalidades avanzadas
			});
		}

		// Event listener para búsqueda en tiempo real
		if (tableSearch) {
			tableSearch.addEventListener('input', () => {
				aplicarFiltroHistorial();
			});
		}

		// Event listener para botón limpiar filtros
		if (btnLimpiarFiltros) {
			btnLimpiarFiltros.addEventListener('click', () => {
				// Limpiar filtros
				fechaFiltroActual = null;
				filtroTipoActual = 'todos';
				
				// Resetear elementos del DOM
				if (datepickerHistorial) {
					datepickerHistorial.value = '';
				}
				if (tableSearch) {
					tableSearch.value = '';
				}
				
				// Marcar radio button "todos"
				const radioTodos = dropdownFiltros?.querySelector('input[value="todos"]');
				if (radioTodos) {
					radioTodos.checked = true;
				}
				
				// Aplicar filtros
				aplicarFiltroHistorial();
			});
		}

		// Función para capitalizar nombres
		function capitalizarNombre(nombre) {
			return nombre
				.toLowerCase()
				.split(' ')
				.map(palabra => palabra.charAt(0).toUpperCase() + palabra.slice(1))
				.join(' ');
		}

		// Función para formatear cédula
		function formatearCedula(cedula) {
			const numero = String(cedula).replace(/[^0-9]/g, '');
			return numero.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
		}

		// Función para formatear celular
		function formatearCelular(celular) {
			const numero = String(celular).replace(/[^0-9]/g, '');
			if (numero.length === 10) {
				return `${numero.slice(0, 3)} ${numero.slice(3, 6)} ${numero.slice(6)}`;
			}
			return numero;
		}

		// Función para formatear fecha/hora
		function formatearFecha(timestamp) {
			let fecha;
			
			if (timestamp?.toDate) {
				fecha = timestamp.toDate();
			} else if (typeof timestamp === 'string') {
				fecha = new Date(timestamp);
			} else {
				fecha = new Date(timestamp);
			}
			
			return fecha.toLocaleString('es-CO', {
				day: '2-digit',
				month: '2-digit',
				year: 'numeric',
				hour: '2-digit',
				minute: '2-digit'
			});
		}

		// Función para calcular duración de permanencia
		function calcularDuracion(tiempoEntrada, tiempoSalida) {
			let entrada;
			let salida;
			
			if (tiempoEntrada?.toDate) {
				entrada = tiempoEntrada.toDate();
			} else {
				entrada = new Date(tiempoEntrada);
			}
			
			if (tiempoSalida?.toDate) {
				salida = tiempoSalida.toDate();
			} else {
				salida = new Date(tiempoSalida);
			}
			
			const diferencia = salida - entrada;
			const horas = Math.floor(diferencia / (1000 * 60 * 60));
			const minutos = Math.floor((diferencia % (1000 * 60 * 60)) / (1000 * 60));
			
			if (horas > 0) {
				return `${horas}h ${minutos}m`;
			}
			return `${minutos}m`;
		}

		// Función para calcular el costo total del vehículo
		function calcularCostoTotal(visitante) {
			if (!visitante.vehiculo || !visitante.vehiculo.tarifa) return 0;
			
			// Si el visitante ya tiene un costo calculado (costoVehiculo), usarlo
			if (visitante.costoVehiculo !== undefined) {
				return visitante.costoVehiculo;
			}
			
			// Si tiene información del vehículo final con costo total, usarla
			if (visitante.vehiculoFinal && visitante.vehiculoFinal.costoTotal !== undefined) {
				return visitante.vehiculoFinal.costoTotal;
			}
			
			// Calcular basado en el tiempo de estancia
			let entrada;
			let salida;
			
			if (visitante.tiempoEntrada?.toDate) {
				entrada = visitante.tiempoEntrada.toDate();
			} else {
				entrada = new Date(visitante.tiempoEntrada || visitante.fechaCreacion);
			}
			
			if (visitante.tiempoSalida?.toDate) {
				salida = visitante.tiempoSalida.toDate();
			} else {
				salida = new Date(visitante.tiempoSalida || visitante.fechaSalida);
			}
			
			const diferencia = salida - entrada;
			const minutos = Math.floor(diferencia / (1000 * 60)); // Convertir a minutos
			
			return minutos * visitante.vehiculo.tarifa;
		}

		// Función para crear una fila de la tabla
		function crearFilaTabla(visitante) {
			// Calcular costo total del vehículo
			const costoTotal = visitante.vehiculo ? calcularCostoTotal(visitante) : 0;
			
			return `
				<tr class="border-b dark:border-gray-700">
					<td class="px-4 py-3 font-medium text-gray-900 dark:text-white w-1/5">
						<div class="flex items-center">
							<div class="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
								<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user w-5 h-5 text-gray-600"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>
							</div>
							<div class="min-w-0">
								<div class="text-base font-semibold truncate">${capitalizarNombre(visitante.nombre)}</div>
								<div class="font-normal text-gray-500 truncate">CC: ${formatearCedula(visitante.cedula)}</div>
							</div>
						</div>
					</td>
					<td class="px-4 py-3 w-1/8">
						<span class="truncate block">${formatearCelular(visitante.celular)}</span>
					</td>
					<td class="px-4 py-3 w-1/8">
						<div class="text-base truncate">Apto: ${visitante.apartamento.toUpperCase()}</div>
						<div class="text-sm text-gray-500 truncate">Por: ${capitalizarNombre(visitante.autorizadoPor)}</div>
					</td>
					<td class="px-4 py-3 w-1/6">
						${visitante.vehiculo ? `
							<div class="flex items-center">
								<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-car w-4 h-4 text-blue-600 dark:text-blue-400 mr-1 flex-shrink-0"><path d="M8 19H6a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h6l2 4h4a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2"/><circle cx="7" cy="17" r="2"/><circle cx="17" cy="17" r="2"/></svg>
								<div class="min-w-0">
									<div class="text-sm font-medium text-gray-900 dark:text-white truncate">${visitante.vehiculo.placa}</div>
									<div class="text-xs text-gray-500 dark:text-gray-400 truncate">${visitante.vehiculo.tipo} • ${visitante.vehiculo.color}</div>
								</div>
							</div>
						` : `
							<span class="text-gray-400 dark:text-gray-500 text-sm">Sin vehículo</span>
						`}
					</td>
					<td class="px-4 py-3 w-1/8">
						${visitante.vehiculo ? `
							<span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-1 rounded dark:bg-green-900 dark:text-green-300">
								$${costoTotal.toLocaleString('es-CO')}
							</span>
						` : `
							<span class="text-gray-400 dark:text-gray-500 text-sm">—</span>
						`}
					</td>
					<td class="px-4 py-3 w-1/8">
						<span class="text-sm truncate block">${formatearFecha(visitante.tiempoEntrada || visitante.fechaCreacion)}</span>
					</td>
					<td class="px-4 py-3 w-1/8">
						<span class="text-sm truncate block">${formatearFecha(visitante.tiempoSalida || visitante.fechaSalida)}</span>
					</td>
					<td class="px-4 py-3 w-1/12">
						<span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300 inline-block">
							${calcularDuracion(visitante.tiempoEntrada || visitante.fechaCreacion, visitante.tiempoSalida || visitante.fechaSalida)}
						</span>
					</td>
					<td class="px-4 py-3 w-16">
						<div class="flex items-center justify-end">
							<button class="inline-flex items-center p-0.5 text-sm font-medium text-center text-gray-500 hover:text-gray-800 rounded-lg focus:outline-none dark:text-gray-400 dark:hover:text-gray-100" onclick="mostrarMenuAcciones(event, '${visitante.id}')">
								<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-more-horizontal w-5 h-5"><circle cx="12" cy="12" r="1"/><circle cx="19" cy="12" r="1"/><circle cx="5" cy="12" r="1"/></svg>
							</button>
						</div>
					</td>
				</tr>
			`;
		}

		// Función para mostrar menú de acciones
		window.mostrarMenuAcciones = function(event, visitanteId) {
			event.stopPropagation();
			
			// Verificar si ya existe un menú abierto para este visitante
			const menuExistente = document.querySelector(`.menu-acciones[data-visitante-id="${visitanteId}"]`);
			if (menuExistente) {
				// Si ya está abierto, cerrarlo (toggle)
				menuExistente.remove();
				return;
			}
			
			// Remover cualquier otro menú abierto
			document.querySelectorAll('.menu-acciones').forEach(m => m.remove());
			
			// Crear menú contextual
			const menu = document.createElement('div');
			menu.className = 'absolute z-10 w-44 bg-white rounded divide-y divide-gray-100 shadow dark:bg-gray-700 dark:divide-gray-600';
			menu.setAttribute('data-visitante-id', visitanteId); // Para identificar el menú
			menu.innerHTML = `
				<ul class="py-1 text-sm text-gray-700 dark:text-gray-200">
					<li>
						<button onclick="verVisitante('${visitanteId}')" class="block w-full text-left py-2 px-4 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
							👁️ Ver detalles
						</button>
					</li>
					<li>
						<button onclick="editarVisitante('${visitanteId}')" class="block w-full text-left py-2 px-4 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
							✏️ Editar
						</button>
					</li>
					<li>
						<button onclick="eliminarVisitante('${visitanteId}')" class="block w-full text-left py-2 px-4 text-red-600 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-red-500">
							🗑️ Eliminar
						</button>
					</li>
				</ul>
			`;
			
			menu.classList.add('menu-acciones');
			
			// Agregar el menú al DOM temporalmente para obtener sus dimensiones
			menu.style.visibility = 'hidden';
			document.body.appendChild(menu);
			
			// Obtener dimensiones del menú y del viewport
			const menuRect = menu.getBoundingClientRect();
			const buttonRect = event.target.getBoundingClientRect();
			const viewportWidth = window.innerWidth;
			const viewportHeight = window.innerHeight;
			
			// Calcular posición inteligente
			let top = buttonRect.bottom + 5; // 5px de margen
			const { left: initialLeft } = buttonRect;
			let left = initialLeft;
			
			// Ajustar si el menú se sale por la derecha
			if (left + menuRect.width > viewportWidth) {
				left = buttonRect.right - menuRect.width;
			}
			
			// Ajustar si el menú se sale por la izquierda
			if (left < 0) {
				left = 10; // Margen mínimo desde el borde izquierdo
			}
			
			// Ajustar si el menú se sale por abajo
			if (top + menuRect.height > viewportHeight) {
				top = buttonRect.top - menuRect.height - 5; // Mostrar arriba del botón
			}
			
			// Ajustar si el menú se sale por arriba
			if (top < 0) {
				top = 10; // Margen mínimo desde el borde superior
			}
			
			// Aplicar posición final
			menu.style.position = 'fixed';
			menu.style.top = `${top}px`;
			menu.style.left = `${left}px`;
			menu.style.visibility = 'visible';
			
			// Función para cerrar el menú
			function cerrarMenu() {
				menu.remove();
				document.removeEventListener('click', cerrarMenu);
				document.removeEventListener('keydown', manejarTeclaEscape);
			}
			
			// Función para manejar la tecla Escape
			function manejarTeclaEscape(keyEvent) {
				if (keyEvent.key === 'Escape') {
					cerrarMenu();
				}
			}
			
			// Event listeners para cerrar el menú
			setTimeout(() => {
				document.addEventListener('click', cerrarMenu);
				document.addEventListener('keydown', manejarTeclaEscape);
			}, 100);
		};

		// Función para ver detalles del visitante
		window.verVisitante = function(visitanteId) {
			const visitante = historialVisitantes.find(v => v.id === visitanteId);
			if (visitante) {
				modalTitulo.textContent = 'Detalles del Visitante';
				llenarFormulario(visitante, false); // false = solo ver
				deshabilitarFormulario(true);
				document.getElementById('guardar-cambios').style.display = 'none';
				mostrarModal(modalVisitante);
			}
		};

		// Función para editar visitante
		window.editarVisitante = function(visitanteId) {
			const visitante = historialVisitantes.find(v => v.id === visitanteId);
			if (visitante) {
				visitanteEditando = visitante;
				modalTitulo.textContent = 'Editar Visitante';
				llenarFormulario(visitante, true); // true = es edición
				deshabilitarFormulario(false);
				document.getElementById('guardar-cambios').style.display = 'inline-flex';
				mostrarModal(modalVisitante);
			}
		};

		// Función para eliminar visitante
		window.eliminarVisitante = function(visitanteId) {
			visitanteEditando = historialVisitantes.find(v => v.id === visitanteId);
			mostrarModal(modalEliminar);
		};

		// Función para llenar formulario
		function llenarFormulario(visitante, esEdicion = false) {
			document.getElementById('nombre').value = visitante.nombre;
			document.getElementById('cedula').value = visitante.cedula;
			document.getElementById('celular').value = visitante.celular;
			document.getElementById('apartamento').value = visitante.apartamento;
			document.getElementById('autorizadoPor').value = visitante.autorizadoPor;
			
			// Mostrar/ocultar sección de vehículo
			const seccionVehiculo = document.getElementById('seccion-vehiculo');
			const bannerVer = document.getElementById('banner-vehiculo-ver');
			const bannerEditar = document.getElementById('banner-vehiculo-editar');
			
			if (visitante.vehiculo) {
				seccionVehiculo.classList.remove('hidden');
				
				// Calcular el costo total
				const costoTotal = calcularCostoTotal(visitante);
				const costoFormateado = costoTotal ? `$${costoTotal.toLocaleString('es-CO')}` : '$0';
				
				if (esEdicion) {
					// Mostrar banner rojo para edición
					bannerVer.classList.add('hidden');
					bannerEditar.classList.remove('hidden');
					
					// Llenar campos del formulario de edición
					document.getElementById('vehiculo-placa').value = visitante.vehiculo.placa || '';
					document.getElementById('vehiculo-tipo').value = visitante.vehiculo.tipo || '';
					document.getElementById('vehiculo-color').value = visitante.vehiculo.color || '';
					document.getElementById('vehiculo-costo').value = costoFormateado;
				} else {
					// Mostrar banner azul para solo ver
					bannerEditar.classList.add('hidden');
					bannerVer.classList.remove('hidden');
					
					// Llenar elementos de solo lectura
					document.getElementById('vehiculo-placa-ver').textContent = visitante.vehiculo.placa || '';
					document.getElementById('vehiculo-tipo-ver').textContent = visitante.vehiculo.tipo || '';
					document.getElementById('vehiculo-color-ver').textContent = visitante.vehiculo.color || '';
					document.getElementById('vehiculo-costo-ver').textContent = costoFormateado;
				}
			} else {
				seccionVehiculo.classList.add('hidden');
			}
		}

		// Función para habilitar/deshabilitar formulario
		function deshabilitarFormulario(deshabilitar) {
			// Solo deshabilitar campos básicos del visitante, no los del vehículo
			const camposBasicos = ['nombre', 'cedula', 'celular', 'apartamento', 'autorizadoPor'];
			camposBasicos.forEach(campoId => {
				const campo = document.getElementById(campoId);
				if (campo) {
					campo.disabled = deshabilitar;
				}
			});
		}

		// Función para mostrar modal
		function mostrarModal(modal) {
			modal.classList.remove('hidden');
			modal.classList.add('flex', 'items-center', 'justify-center');
		}

		// Función para ocultar modal
		function ocultarModal(modal) {
			modal.classList.add('hidden');
			modal.classList.remove('flex', 'items-center', 'justify-center');
		}

		// Función para filtrar visitantes
		function filtrarVisitantes(termino) {
			if (!termino.trim()) {
				historialFiltrado = [...historialVisitantes];
			} else {
				const terminoLower = termino.toLowerCase();
				historialFiltrado = historialVisitantes.filter(visitante => 
					visitante.nombre.toLowerCase().includes(terminoLower) ||
					visitante.cedula.includes(termino) ||
					visitante.celular.includes(termino) ||
					visitante.apartamento.toLowerCase().includes(terminoLower) ||
					visitante.autorizadoPor.toLowerCase().includes(terminoLower)
				);
			}
			paginaActual = 1;
			renderizarTabla();
		}

		// Función para calcular estadísticas
		function calcularEstadisticas() {
			if (historialVisitantes.length === 0) return;
			
			let totalMinutos = 0;
			historialVisitantes.forEach(visitante => {
				const entrada = visitante.tiempoEntrada?.toDate ? 
					visitante.tiempoEntrada.toDate() : 
					new Date(visitante.fechaCreacion);
				const salida = visitante.tiempoSalida?.toDate ? 
					visitante.tiempoSalida.toDate() : 
					new Date(visitante.fechaSalida);
				
				totalMinutos += (salida - entrada) / (1000 * 60);
			});
			
			const promedioMinutos = Math.floor(totalMinutos / historialVisitantes.length);
			const horas = Math.floor(promedioMinutos / 60);
			const minutos = promedioMinutos % 60;
			
			if (promedioPermanen) {
				promedioPermanen.textContent = horas > 0 ? `${horas}h ${minutos}m` : `${minutos}m`;
			}
		}

		// Función para renderizar la tabla
		function renderizarTabla() {
			if (totalRegistros) {
				totalRegistros.textContent = String(historialFiltrado.length);
			}
			
			calcularEstadisticas();
			
			if (historialFiltrado.length === 0) {
				if (sinHistorial && tablaHistorial) {
					sinHistorial.classList.remove('hidden');
					tablaHistorial.style.display = 'none';
				}
			} else {
				if (sinHistorial && tablaHistorial && tbodyHistorial) {
					sinHistorial.classList.add('hidden');
					tablaHistorial.style.display = 'table';
					
					// Calcular paginación
					const inicio = (paginaActual - 1) * itemsPorPagina;
					const fin = inicio + itemsPorPagina;
					const visitantesPagina = historialFiltrado.slice(inicio, fin);
					
					// Limpiar tabla
					tbodyHistorial.innerHTML = '';
					
					// Agregar cada visitante
					visitantesPagina.forEach(visitante => {
						tbodyHistorial.innerHTML += crearFilaTabla(visitante);
					});
					
					actualizarPaginacion();
				}
			}
		}

		// Función para actualizar paginación
		function actualizarPaginacion() {
			const totalPaginas = Math.ceil(historialFiltrado.length / itemsPorPagina);
			const paginacion = document.getElementById('paginacion');
			
			if (totalPaginas > 1) {
				paginacion.classList.remove('hidden');
				
				const inicio = (paginaActual - 1) * itemsPorPagina + 1;
				const fin = Math.min(paginaActual * itemsPorPagina, historialFiltrado.length);
				
				document.getElementById('inicio-rango').textContent = inicio;
				document.getElementById('fin-rango').textContent = fin;
				document.getElementById('total-items').textContent = historialFiltrado.length;
				document.getElementById('numero-pagina').textContent = paginaActual;
				
				// Botones de navegación
				document.getElementById('btn-anterior').disabled = paginaActual === 1;
				document.getElementById('btn-siguiente').disabled = paginaActual === totalPaginas;
			} else {
				paginacion.classList.add('hidden');
			}
		}

		// Event listeners
		if (tableSearch) {
			tableSearch.addEventListener('input', (e) => {
				filtrarVisitantes(e.target.value);
			});
		}

		// Event listeners para modales
		document.getElementById('cerrar-modal').addEventListener('click', () => {
			ocultarModal(modalVisitante);
		});

		document.getElementById('cancelar-modal').addEventListener('click', () => {
			ocultarModal(modalVisitante);
		});

		document.getElementById('cerrar-modal-eliminar').addEventListener('click', () => {
			ocultarModal(modalEliminar);
		});

		document.getElementById('cancelar-eliminar').addEventListener('click', () => {
			ocultarModal(modalEliminar);
		});

		// Event listeners para modal de exportación
		const modalExportar = document.getElementById('modal-exportar');
		
		document.getElementById('btn-exportar').addEventListener('click', () => {
			if (historialFiltrado.length === 0) {
				if (window.mostrarAlert) {
					window.mostrarAlert('No hay datos para exportar', 'warning');
				}
				return;
			}
			mostrarModal(modalExportar);
		});

		document.getElementById('cerrar-modal-exportar').addEventListener('click', () => {
			ocultarModal(modalExportar);
		});

		// Funciones de exportación
		async function exportarPDF() {
			try {
				// Mostrar indicador de carga
				const btnPDF = document.getElementById('exportar-pdf');
				const textoOriginal = btnPDF.innerHTML;
				btnPDF.innerHTML = `
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-loader-2 animate-spin -ml-1 mr-3 h-5 w-5 text-white"><path d="M21 12a9 9 0 11-6.219-8.56"/></svg>
					Generando PDF...
				`;
				btnPDF.disabled = true;

				// Importar jsPDF
				const { jsPDF } = await import('jspdf');
				
				// Crear documento PDF horizontal
				const doc = new jsPDF('landscape');
				const pageWidth = doc.internal.pageSize.width; // 297mm
				const pageHeight = doc.internal.pageSize.height; // 210mm
				const margin = 10;
				let yPosition = margin + 10;
				
				// TÍTULO PRINCIPAL - CENTRADO
				doc.setFontSize(18);
				doc.setFont('helvetica', 'bold');
				doc.setTextColor(0, 0, 0);
				doc.text('HISTORIAL DE VISITANTES - GESTCLOUD', pageWidth / 2, yPosition, { align: 'center' });
				yPosition += 15;
				
				// INFORMACIÓN DEL FILTRO
				doc.setFontSize(12);
				doc.setFont('helvetica', 'normal');
				doc.setTextColor(80, 80, 80);
				
				let textoFiltro = '';
				switch(filtroTipoActual) {
					case 'con-vehiculo':
						textoFiltro = `Filtro aplicado: Visitantes CON vehículo (${historialFiltrado.length} registros)`;
						break;
					case 'sin-vehiculo':
						textoFiltro = `Filtro aplicado: Visitantes SIN vehículo (${historialFiltrado.length} registros)`;
						break;
					default:
						textoFiltro = `Filtro aplicado: TODOS los visitantes (${historialFiltrado.length} registros)`;
				}
				
				doc.text(textoFiltro, pageWidth / 2, yPosition, { align: 'center' });
				yPosition += 8;
				
				// Fecha de generación
				const fechaGeneracion = new Date().toLocaleString('es-CO', {
					year: 'numeric',
					month: 'long',
					day: 'numeric',
					hour: '2-digit',
					minute: '2-digit'
				});
				doc.setFontSize(10);
				doc.text(`Generado el: ${fechaGeneracion}`, pageWidth / 2, yPosition, { align: 'center' });
				yPosition += 20;
				
				// CONFIGURAR COLUMNAS SEGÚN EL FILTRO
				let tableHeaders = [];
				let colWidths = [];
				let incluirVehiculo = false;
				let incluirCosto = false;
				
				// Determinar qué columnas incluir
				if (filtroTipoActual === 'sin-vehiculo') {
					// Para visitantes SIN vehículo: NO mostrar columnas de vehículo ni costo
					tableHeaders = ['#', 'Nombre Completo', 'Cédula', 'Apto', 'Entrada', 'Salida', 'Tiempo', 'Autorizado por'];
					colWidths = [12, 50, 28, 15, 32, 32, 20, 45];
				} else if (filtroTipoActual === 'con-vehiculo') {
					// Para visitantes CON vehículo: mostrar todas las columnas
					incluirVehiculo = true;
					incluirCosto = true;
					tableHeaders = ['#', 'Nombre Completo', 'Cédula', 'Apto', 'Vehículo', 'Entrada', 'Salida', 'Tiempo', 'Costo', 'Autorizado por'];
					colWidths = [10, 40, 24, 12, 35, 28, 28, 18, 20, 35];
				} else {
					// Para TODOS: mostrar vehículo y costo solo si hay visitantes con vehículo
					if (historialFiltrado.some(v => v.vehiculo)) {
						incluirVehiculo = true;
						incluirCosto = true;
						tableHeaders = ['#', 'Nombre Completo', 'Cédula', 'Apto', 'Vehículo', 'Entrada', 'Salida', 'Tiempo', 'Costo', 'Autorizado por'];
						colWidths = [10, 40, 24, 12, 35, 28, 28, 18, 20, 35];
					} else {
						tableHeaders = ['#', 'Nombre Completo', 'Cédula', 'Apto', 'Entrada', 'Salida', 'Tiempo', 'Autorizado por'];
						colWidths = [12, 50, 28, 15, 32, 32, 20, 45];
					}
				}
				
				// Función para formatear fecha
				function formatearFechaPDF(timestamp) {
					let fecha;
					if (timestamp?.toDate) {
						fecha = timestamp.toDate();
					} else {
						fecha = new Date(timestamp);
					}
					return fecha.toLocaleString('es-CO', {
						day: '2-digit',
						month: '2-digit',
						year: '2-digit',
						hour: '2-digit',
						minute: '2-digit'
					});
				}
				
				// PREPARAR DATOS DE LA TABLA
				let totalCosto = 0;
				const tableData = historialFiltrado.map((visitante, index) => {
					const row = [];
					
					// Columnas básicas
					row.push(
						index + 1,
						capitalizarNombre(visitante.nombre),
						formatearCedula(visitante.cedula),
						visitante.apartamento.toUpperCase()
					);
					
					// Agregar vehículo si corresponde
					if (incluirVehiculo) {
						if (visitante.vehiculo) {
							row.push(`${visitante.vehiculo.placa} - ${visitante.vehiculo.tipo} ${visitante.vehiculo.color}`);
						} else {
							row.push('Sin vehículo');
						}
					}
					
					// Tiempos
					row.push(
						formatearFechaPDF(visitante.tiempoEntrada || visitante.fechaCreacion),
						formatearFechaPDF(visitante.tiempoSalida || visitante.fechaSalida),
						calcularDuracion(visitante.tiempoEntrada || visitante.fechaCreacion, visitante.tiempoSalida || visitante.fechaSalida)
					);
					
					// Agregar costo si corresponde
					if (incluirCosto) {
						const costo = visitante.vehiculo ? calcularCostoTotal(visitante) : 0;
						totalCosto += costo;
						row.push(costo > 0 ? `$${costo.toLocaleString('es-CO')}` : '-');
					}
					
					// Autorizado por (siempre al final)
					row.push(capitalizarNombre(visitante.autorizadoPor));
					
					return row;
				});
				
				// DIBUJAR ENCABEZADO DE LA TABLA
				const headerHeight = 12;
				doc.setFillColor(240, 240, 240);
				doc.rect(margin, yPosition, pageWidth - 2 * margin, headerHeight, 'F');
				
				// Bordes del encabezado
				doc.setLineWidth(0.5);
				doc.setDrawColor(0, 0, 0);
				doc.rect(margin, yPosition, pageWidth - 2 * margin, headerHeight);
				
				// Texto del encabezado
				doc.setFont('helvetica', 'bold');
				doc.setFontSize(8);
				doc.setTextColor(0, 0, 0);
				
				let xPos = margin;
				tableHeaders.forEach((header, index) => {
					// Centrar texto en cada celda del encabezado
					const textWidth = doc.getTextWidth(header);
					const cellCenter = xPos + (colWidths[index] / 2) - (textWidth / 2);
					doc.text(header, cellCenter, yPosition + 8);
					
					// Líneas verticales entre columnas
					if (index < tableHeaders.length - 1) {
						doc.line(xPos + colWidths[index], yPosition, xPos + colWidths[index], yPosition + headerHeight);
					}
					
					xPos += colWidths[index];
				});
				
				yPosition += headerHeight;
				
				// DIBUJAR FILAS DE DATOS
				doc.setFont('helvetica', 'normal');
				doc.setFontSize(7);
				
				tableData.forEach((row, rowIndex) => {
					const rowHeight = 8;
					
					// Verificar si necesita nueva página
					if (yPosition + rowHeight > pageHeight - 30) {
						doc.addPage('landscape');
						yPosition = margin + 10;
						
						// Redibujar encabezado en nueva página
						doc.setFillColor(240, 240, 240);
						doc.rect(margin, yPosition, pageWidth - 2 * margin, headerHeight, 'F');
						doc.setLineWidth(0.5);
						doc.setDrawColor(0, 0, 0);
						doc.rect(margin, yPosition, pageWidth - 2 * margin, headerHeight);
						
						doc.setFont('helvetica', 'bold');
						doc.setFontSize(8);
						xPos = margin;
						tableHeaders.forEach((header, index) => {
							const textWidth = doc.getTextWidth(header);
							const cellCenter = xPos + (colWidths[index] / 2) - (textWidth / 2);
							doc.text(header, cellCenter, yPosition + 8);
							
							if (index < tableHeaders.length - 1) {
								doc.line(xPos + colWidths[index], yPosition, xPos + colWidths[index], yPosition + headerHeight);
							}
							xPos += colWidths[index];
						});
						
						yPosition += headerHeight;
						doc.setFont('helvetica', 'normal');
						doc.setFontSize(7);
					}
					
					// Fondo alternado para las filas
					if (rowIndex % 2 === 0) {
						doc.setFillColor(250, 250, 250);
						doc.rect(margin, yPosition, pageWidth - 2 * margin, rowHeight, 'F');
					}
					
					// Bordes de la fila
					doc.setLineWidth(0.3);
					doc.setDrawColor(200, 200, 200);
					doc.rect(margin, yPosition, pageWidth - 2 * margin, rowHeight);
					
					// Contenido de las celdas - TODO CENTRADO
					doc.setTextColor(0, 0, 0);
					xPos = margin;
					row.forEach((cellData, cellIndex) => {
						let texto = String(cellData || '-');
						
						// Truncar texto si es muy largo
						const maxChars = Math.floor(colWidths[cellIndex] * 1.2);
						if (texto.length > maxChars) {
							texto = texto.substring(0, maxChars - 3) + '...';
						}
						
						// CENTRAR TEXTO EN CADA CELDA
						const textWidth = doc.getTextWidth(texto);
						const cellCenter = xPos + (colWidths[cellIndex] / 2) - (textWidth / 2);
						doc.text(texto, cellCenter, yPosition + 5.5);
						
						// Líneas verticales entre columnas
						if (cellIndex < row.length - 1) {
							doc.line(xPos + colWidths[cellIndex], yPosition, xPos + colWidths[cellIndex], yPosition + rowHeight);
						}
						
						xPos += colWidths[cellIndex];
					});
					
					yPosition += rowHeight;
				});
				
				// AGREGAR TOTAL AL FINAL
				if (incluirCosto && totalCosto > 0) {
					yPosition += 10;
					
					// Verificar espacio para el total
					if (yPosition + 20 > pageHeight - 20) {
						doc.addPage('landscape');
						yPosition = margin + 20;
					}
					
					doc.setFont('helvetica', 'bold');
					doc.setFontSize(12);
					doc.setTextColor(0, 120, 0);
					
					const textoTotal = `TOTAL GENERADO: $${totalCosto.toLocaleString('es-CO')}`;
					doc.text(textoTotal, pageWidth - margin - 80, yPosition);
					
					// Subrayar el total
					const totalWidth = doc.getTextWidth(textoTotal);
					doc.setLineWidth(1);
					doc.line(pageWidth - margin - 80, yPosition + 2, pageWidth - margin - 80 + totalWidth, yPosition + 2);
				}
				
				// PIE DE PÁGINA
				yPosition = pageHeight - 15;
				doc.setFont('helvetica', 'italic');
				doc.setFontSize(8);
				doc.setTextColor(120, 120, 120);
				doc.text(`${textoFiltro}`, margin, yPosition);
				doc.text(`GestCloud © ${new Date().getFullYear()}`, pageWidth - margin - 50, yPosition);
				
				// GUARDAR PDF con nombre descriptivo
				const fechaActual = new Date().toLocaleDateString('es-CO').replace(/\//g, '-');
				let nombreArchivo = `historial-visitantes-${fechaActual}`;
				
				switch(filtroTipoActual) {
					case 'con-vehiculo':
						nombreArchivo += '-con-vehiculo';
						break;
					case 'sin-vehiculo':
						nombreArchivo += '-sin-vehiculo';
						break;
				}
				
				doc.save(`${nombreArchivo}.pdf`);
				
				// Restaurar botón
				btnPDF.innerHTML = textoOriginal;
				btnPDF.disabled = false;
				
				// Cerrar modal y mostrar éxito
				ocultarModal(modalExportar);
				if (window.mostrarAlert) {
					window.mostrarAlert('PDF exportado exitosamente', 'success');
				}
				
			} catch (error) {
				console.error('Error exportando PDF:', error);
				
				// Restaurar botón en caso de error
				const btnPDF = document.getElementById('exportar-pdf');
				btnPDF.innerHTML = `
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text w-5 h-5 mr-2"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"/><path d="M14,2 L14,8 L20,8"/><line x1="16" x2="8" y1="13" y2="13"/><line x1="16" x2="8" y1="17" y2="17"/><polyline points="10,9 9,9 8,9"/></svg>
					Exportar como PDF
				`;
				btnPDF.disabled = false;
				
				if (window.mostrarAlert) {
					window.mostrarAlert(`Error al generar PDF: ${error.message}`, 'error');
				}
			}
		}

		async function exportarExcel() {
			try {
				// Mostrar indicador de carga
				const btnExcel = document.getElementById('exportar-excel');
				const textoOriginal = btnExcel.innerHTML;
				btnExcel.innerHTML = `
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-loader-2 animate-spin -ml-1 mr-3 h-5 w-5 text-white"><path d="M21 12a9 9 0 11-6.219-8.56"/></svg>
					Generando Excel...
				`;
				btnExcel.disabled = true;

				// Importar XLSX dinámicamente
				const XLSX = await import('xlsx');
				
				// Preparar datos para Excel
				const datosExcel = historialFiltrado.map(visitante => ({
					'Nombre': capitalizarNombre(visitante.nombre),
					'Cédula': visitante.cedula,
					'Celular': visitante.celular,
					'Apartamento': visitante.apartamento.toUpperCase(),
					'Autorizado por': capitalizarNombre(visitante.autorizadoPor),
					'Fecha de Entrada': formatearFecha(visitante.tiempoEntrada || visitante.fechaCreacion),
					'Fecha de Salida': formatearFecha(visitante.tiempoSalida || visitante.fechaSalida),
					'Tiempo de Permanencia': calcularDuracion(visitante.tiempoEntrada || visitante.fechaCreacion, visitante.tiempoSalida || visitante.fechaSalida)
				}));
				
				// Crear libro de trabajo
				const libro = XLSX.utils.book_new();
				
				// Crear hoja de cálculo
				const hoja = XLSX.utils.json_to_sheet(datosExcel);
				
				// Configurar anchos de columna
				const anchosColumna = [
					{ wch: 25 }, // Nombre
					{ wch: 15 }, // Cédula
					{ wch: 15 }, // Celular
					{ wch: 12 }, // Apartamento
					{ wch: 25 }, // Autorizado por
					{ wch: 20 }, // Fecha Entrada
					{ wch: 20 }, // Fecha Salida
					{ wch: 18 }  // Permanencia
				];
				hoja['!cols'] = anchosColumna;
				
				// Agregar información del reporte
				const infoReporte = [
					['Historial de Visitantes - GestCloud'],
					[`Generado el: ${new Date().toLocaleString('es-CO')}`],
					[`Total de registros: ${historialFiltrado.length}`],
					[''], // Fila vacía
				];
				
				// Insertar información al inicio
				XLSX.utils.sheet_add_aoa(hoja, infoReporte, { origin: 'A1' });
				
				// Mover los datos principales 4 filas hacia abajo
				const range = XLSX.utils.decode_range(hoja['!ref']);
				range.s.r = 4; // Comenzar desde la fila 5 (índice 4)
				hoja['!ref'] = XLSX.utils.encode_range(range);
				
				// Agregar la hoja al libro
				XLSX.utils.book_append_sheet(libro, hoja, 'Historial Visitantes');
				
				// Generar y descargar archivo
				const fechaActual = new Date().toLocaleDateString('es-CO').replace(/\//g, '-');
				const nombreArchivo = `historial-visitantes-${fechaActual}.xlsx`;
				
				XLSX.writeFile(libro, nombreArchivo);
				
				// Restaurar botón
				btnExcel.innerHTML = textoOriginal;
				btnExcel.disabled = false;
				
				// Cerrar modal y mostrar éxito
				ocultarModal(modalExportar);
				if (window.mostrarAlert) {
					window.mostrarAlert('Excel exportado exitosamente', 'success');
				}
				
			} catch (error) {
				console.error('Error exportando Excel:', error);
				
				// Restaurar botón en caso de error
				const btnExcel = document.getElementById('exportar-excel');
				btnExcel.innerHTML = `
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-spreadsheet w-5 h-5 mr-2"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"/><path d="M14,2 L14,8 L20,8"/><path d="M8 13h2"/><path d="M14 13h2"/><path d="M8 17h2"/><path d="M14 17h2"/></svg>
					Exportar como Excel
				`;
				btnExcel.disabled = false;
				
				if (window.mostrarAlert) {
					window.mostrarAlert(`Error al generar Excel: ${error.message}`, 'error');
				}
			}
		}

		// Conectar botones del modal de exportación
		document.getElementById('exportar-pdf').addEventListener('click', exportarPDF);
		document.getElementById('exportar-excel').addEventListener('click', exportarExcel);

		// Guardar cambios
		document.getElementById('guardar-cambios').addEventListener('click', async () => {
			if (visitanteEditando) {
				try {
					const datosActualizados = {
						nombre: document.getElementById('nombre').value,
						cedula: document.getElementById('cedula').value,
						celular: document.getElementById('celular').value,
						apartamento: document.getElementById('apartamento').value,
						autorizadoPor: document.getElementById('autorizadoPor').value
					};
					
					// Actualizar en Firebase
					const { updateDoc, doc } = await import('firebase/firestore');
					const visitanteRef = doc(window.__firestoreDb, 'visitantes', visitanteEditando.id);
					await updateDoc(visitanteRef, datosActualizados);
					
					ocultarModal(modalVisitante);
					if (window.mostrarAlert) {
						window.mostrarAlert('Visitante actualizado correctamente', 'success');
					}
					
				} catch (error) {
					console.error('Error actualizando visitante:', error);
					if (window.mostrarAlert) {
						window.mostrarAlert('Error al actualizar visitante', 'error');
					}
				}
			}
		});

		// Confirmar eliminación
		document.getElementById('confirmar-eliminar').addEventListener('click', async () => {
			if (visitanteEditando) {
				try {
					// Eliminar de Firebase - Eliminación definitiva de ambas colecciones
					const { deleteDoc, doc, getDoc } = await import('firebase/firestore');
					
					console.log('🗑️ Iniciando eliminación definitiva del visitante:', visitanteEditando.id);
					
					let eliminacionesExitosas = 0;
					const erroresEliminacion = [];
					
					// 1. Eliminar de la colección principal 'visitantes'
					try {
						const visitanteRef = doc(window.__firestoreDb, 'visitantes', visitanteEditando.id);
						const visitanteDoc = await getDoc(visitanteRef);
						
						if (visitanteDoc.exists()) {
							await deleteDoc(visitanteRef);
							console.log('✅ Eliminado de colección "visitantes"');
							eliminacionesExitosas++;
						} else {
							console.log('ℹ️ No encontrado en colección "visitantes"');
						}
					} catch (error) {
						console.error('❌ Error eliminando de "visitantes":', error);
						erroresEliminacion.push(`visitantes: ${error.message}`);
					}
					
					// 2. Eliminar de la colección de historial 'visitantes_historial' si existe
					try {
						const historialRef = doc(window.__firestoreDb, 'visitantes_historial', visitanteEditando.id);
						const historialDoc = await getDoc(historialRef);
						
						if (historialDoc.exists()) {
							await deleteDoc(historialRef);
							console.log('✅ Eliminado de colección "visitantes_historial"');
							eliminacionesExitosas++;
						} else {
							console.log('ℹ️ No encontrado en colección "visitantes_historial"');
						}
					} catch (error) {
						console.error('❌ Error eliminando de "visitantes_historial":', error);
						erroresEliminacion.push(`visitantes_historial: ${error.message}`);
					}
					
					ocultarModal(modalEliminar);
					
					// Mostrar resultado de la eliminación
					if (eliminacionesExitosas > 0) {
						const mensaje = eliminacionesExitosas === 1 ? 
							'Registro eliminado definitivamente' : 
							`Registro eliminado definitivamente de ${eliminacionesExitosas} ubicaciones`;
						
						if (window.mostrarAlert) {
							window.mostrarAlert(mensaje, 'success');
						}
						
						// Recargar la tabla para reflejar los cambios
						setTimeout(() => {
							window.location.reload();
						}, 2000);
					} else {
						if (window.mostrarAlert) {
							window.mostrarAlert('El registro no se encontró en ninguna colección o ya fue eliminado', 'warning');
						}
					}
					
					if (erroresEliminacion.length > 0) {
						console.warn('⚠️ Algunos errores durante la eliminación:', erroresEliminacion);
					}
					
				} catch (error) {
					console.error('Error eliminando visitante:', error);
					if (window.mostrarAlert) {
						window.mostrarAlert('Error al eliminar registro', 'error');
					}
				}
			}
		});

		// Paginación
		document.getElementById('btn-anterior').addEventListener('click', () => {
			if (paginaActual > 1) {
				paginaActual--;
				renderizarTabla();
			}
		});

		document.getElementById('btn-siguiente').addEventListener('click', () => {
			const totalPaginas = Math.ceil(historialFiltrado.length / itemsPorPagina);
			if (paginaActual < totalPaginas) {
				paginaActual++;
				renderizarTabla();
			}
		});

		// Conectar con Firebase para obtener historial
		if (window.escucharHistorialVisitantes) {
			unsubscribe = window.escucharHistorialVisitantes((visitantes) => {
				historialVisitantes = visitantes;
				historialFiltrado = [...visitantes];
				actualizarContadoresFiltrosHistorial();
				actualizarContadorBotonFiltrar();
				renderizarTabla();
			});
		}

		// Cleanup cuando se cierre la página
		window.addEventListener('beforeunload', () => {
			if (unsubscribe) unsubscribe();
		});
	});
</script>

<!-- Incluir componente de notificaciones alert -->
<AlertNotification />
