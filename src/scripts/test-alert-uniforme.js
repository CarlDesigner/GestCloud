// Script de prueba para AlertNotification - Todos los tipos con icono uniforme
// Ejecutar en la consola del navegador para probar todos los alerts

console.log('üß™ Iniciando pruebas de AlertNotification - Dise√±o uniforme de Flowbite');

// Funci√≥n para probar todos los tipos de alert
function probarTodosLosAlerts() {
    console.log('üìù Probando todos los tipos de alert con icono uniforme...');
    
    // Info alert (azul)
    setTimeout(() => {
        if (window.mostrarAlert) {
            window.mostrarAlert('Este es un alert de informaci√≥n con el icono est√°ndar de Flowbite.', 'info', 4000);
            console.log('‚úÖ Info alert mostrado');
        }
    }, 500);
    
    // Success alert (verde)
    setTimeout(() => {
        if (window.mostrarAlert) {
            window.mostrarAlert('¬°Visitante registrado exitosamente! Usa el mismo icono que todos los dem√°s alerts.', 'success', 4000);
            console.log('‚úÖ Success alert mostrado');
        }
    }, 5000);
    
    // Error alert (rojo)
    setTimeout(() => {
        if (window.mostrarAlert) {
            window.mostrarAlert('Error al procesar la solicitud. Mismo icono, diferente color.', 'error', 4000);
            console.log('‚úÖ Error alert mostrado');
        }
    }, 9500);
    
    // Warning alert (amarillo)
    setTimeout(() => {
        if (window.mostrarAlert) {
            window.mostrarAlert('Advertencia: Esta acci√≥n requiere confirmaci√≥n. Icono uniforme en todos los tipos.', 'warning', 4000);
            console.log('‚úÖ Warning alert mostrado');
        }
    }, 14000);
    
    console.log('üèÅ Todas las pruebas programadas. Los alerts aparecer√°n cada 4.5 segundos.');
}

// Funci√≥n para probar rapidamente (sin esperas)
function pruebaRapida() {
    console.log('‚ö° Prueba r√°pida de todos los tipos...');
    
    if (window.mostrarAlert) {
        window.mostrarAlert('Informaci√≥n r√°pida', 'info', 2000);
        setTimeout(() => window.mostrarAlert('√âxito r√°pido', 'success', 2000), 100);
        setTimeout(() => window.mostrarAlert('Error r√°pido', 'error', 2000), 200);
        setTimeout(() => window.mostrarAlert('Advertencia r√°pida', 'warning', 2000), 300);
    }
}

// Funci√≥n para verificar compatibilidad con mostrarToast
function probarCompatibilidad() {
    console.log('üîÑ Probando compatibilidad con mostrarToast...');
    
    if (window.mostrarToast) {
        window.mostrarToast('Probando compatibilidad con mostrarToast - ¬°Funciona!', 'success', 3000);
        console.log('‚úÖ Compatibilidad con mostrarToast confirmada');
    } else {
        console.log('‚ùå mostrarToast no est√° disponible');
    }
}

// Verificar que las funciones est√©n disponibles
if (typeof window.mostrarAlert === 'function') {
    console.log('‚úÖ window.mostrarAlert est√° disponible');
} else {
    console.log('‚ùå window.mostrarAlert NO est√° disponible');
}

if (typeof window.mostrarToast === 'function') {
    console.log('‚úÖ window.mostrarToast est√° disponible (compatibilidad)');
} else {
    console.log('‚ùå window.mostrarToast NO est√° disponible');
}

// Exponer funciones globalmente para pruebas manuales
window.probarTodosLosAlerts = probarTodosLosAlerts;
window.pruebaRapida = pruebaRapida;
window.probarCompatibilidad = probarCompatibilidad;

console.log(`
üéØ Funciones de prueba disponibles:
‚Ä¢ probarTodosLosAlerts() - Prueba todos los tipos con espaciado
‚Ä¢ pruebaRapida() - Prueba r√°pida de todos los tipos
‚Ä¢ probarCompatibilidad() - Verifica que mostrarToast funcione

üí° Ejemplo de uso manual:
mostrarAlert('Mi mensaje', 'success', 3000);
mostrarToast('Mi mensaje', 'error', 3000);
`);
