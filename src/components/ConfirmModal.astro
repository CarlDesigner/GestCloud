---
// Componente modal de confirmación elegante - GestCloud
const { id = 'confirm-modal' } = Astro.props;
---

<!-- Modal de confirmación -->
<div id={id} class="fixed inset-0 z-50 hidden">
	<!-- Overlay oscuro -->
	<div class="fixed inset-0 bg-gray-900 bg-opacity-50 transition-opacity" onclick="cerrarConfirmModal()"></div>
	
	<!-- Modal container -->
	<div class="fixed inset-0 z-50 flex items-center justify-center p-4">
		<div class="relative w-full max-w-md mx-auto bg-white rounded-lg shadow-xl dark:bg-gray-800 transform transition-all">
			<!-- Header del modal -->
			<div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-600">
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white">
					Confirmar Salida
				</h3>
				<button type="button" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" onclick="cerrarConfirmModal()">
					<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
			</div>
			
			<!-- Contenido del modal -->
			<div class="p-6">
				<div class="flex items-center mb-4">
					<div class="flex-shrink-0 w-10 h-10 mx-auto bg-red-100 rounded-full dark:bg-red-900/20 flex items-center justify-center">
						<svg class="w-6 h-6 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
						</svg>
					</div>
				</div>
				
				<div class="text-center">
					<h4 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
						¿Está seguro de dar salida al visitante?
					</h4>
					<p id="confirm-visitante-nombre" class="text-sm text-gray-600 dark:text-gray-400 mb-4">
						<!-- El nombre del visitante se insertará aquí -->
					</p>
					
					<!-- Badge con degradado suave azul-verde como las cards -->
					<div id="confirm-vehiculo-banner" class="hidden mb-4">
						<div class="inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-blue-50 via-blue-50 to-green-50 dark:from-blue-900/20 dark:via-blue-900/20 dark:to-green-900/20 border border-blue-100 dark:border-blue-800/50 shadow-sm">
							<svg class="w-4 h-4 text-blue-600 dark:text-blue-400 mr-2" fill="currentColor" viewBox="0 0 24 24">
								<path d="M18.92 5.01C18.72 4.42 18.16 4 17.5 4h-11c-.66 0-1.22.42-1.42 1.01L3 11v8c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-1h12v1c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-8l-2.08-5.99zM6.5 15c-.83 0-1.5-.67-1.5-1.5S5.67 12 6.5 12s1.5.67 1.5 1.5S7.33 15 6.5 15zm11 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM5 10l1.5-4.5h11L19 10H5z"/>
							</svg>
							<span class="text-sm text-blue-800 dark:text-blue-200">
								<span id="confirm-vehiculo-placa" class="font-mono font-semibold">---</span> • 
								<span id="confirm-vehiculo-tiempo" class="font-medium">---</span> • 
								<span id="confirm-vehiculo-costo" class="font-semibold text-green-600 dark:text-green-400">$0</span>
							</span>
						</div>
					</div>
					
					<p class="text-xs text-gray-500 dark:text-gray-500">
						Esta acción registrará la salida del visitante y calculará el tiempo de permanencia.
					</p>
				</div>
			</div>
			
			<!-- Footer con botones -->
			<div class="flex items-center justify-end space-x-3 p-4 border-t border-gray-200 dark:border-gray-600">
				<button 
					type="button" 
					class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-lg hover:bg-gray-200 focus:ring-4 focus:ring-gray-300 dark:bg-gray-600 dark:text-gray-300 dark:border-gray-500 dark:hover:bg-gray-700 dark:focus:ring-gray-700"
					onclick="cerrarConfirmModal()"
				>
					Cancelar
				</button>
				<button 
					type="button" 
					id="confirm-btn-salida"
					class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-lg hover:bg-red-700 focus:ring-4 focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800"
					onclick="ejecutarSalidaConfirmada()"
				>
					<!-- <svg class="w-4 h-4 mr-2 inline-block" fill="currentColor" viewBox="0 0 24 24">
						<path d="M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.59L17 17l5-5z"/>
					</svg> -->
					Confirmar Salida
				</button>
			</div>
		</div>
	</div>
</div>

<script>
	// @ts-nocheck
	// Variables globales para el modal
	let pendingSalidaData = null;
	
	// Función auxiliar para calcular tiempo en formato cronómetro
	function calcularTiempoModal(tiempoEntrada) {
		const ahora = new Date();
		let entrada;
		
		if (tiempoEntrada?.toDate) {
			entrada = tiempoEntrada.toDate();
		} else if (typeof tiempoEntrada === 'string') {
			entrada = new Date(tiempoEntrada);
		} else {
			entrada = new Date(tiempoEntrada);
		}
		
		const diferencia = ahora - entrada;
		const horas = Math.floor(diferencia / (1000 * 60 * 60));
		const minutos = Math.floor((diferencia % (1000 * 60 * 60)) / (1000 * 60));
		
		if (horas > 0) {
			return `${horas}h ${minutos}m`;
		}
		return `${minutos}m`;
	}
	
	// Función auxiliar para calcular costo del vehículo
	function calcularCostoModal(visitante) {
		if (!visitante.vehiculo) return '$0';
		
		const ahora = new Date();
		let entrada;
		
		if (visitante.tiempoEntrada?.toDate) {
			entrada = visitante.tiempoEntrada.toDate();
		} else if (typeof visitante.tiempoEntrada === 'string') {
			entrada = new Date(visitante.tiempoEntrada);
		} else {
			entrada = new Date(visitante.tiempoEntrada || visitante.fechaCreacion);
		}
		
		const diferenciaMilis = ahora - entrada;
		const minutos = Math.floor(diferenciaMilis / (1000 * 60));
		const costo = minutos * visitante.vehiculo.tarifa;
		
		return `$${costo.toLocaleString('es-CO')}`;
	}
	
	// Función para mostrar modal de confirmación
	window.mostrarConfirmSalida = function mostrarConfirmSalida(visitanteId, visitanteNombre, callbackSalida, visitanteData = null) {
		const modal = document.getElementById('confirm-modal');
		const nombreElement = document.getElementById('confirm-visitante-nombre');
		const vehiculoBanner = document.getElementById('confirm-vehiculo-banner');
		
		if (!modal || !nombreElement) return;
		
		// Guardar datos para ejecutar después de confirmación
		pendingSalidaData = {
			id: visitanteId,
			nombre: visitanteNombre,
			callback: callbackSalida
		};
		
		// Mostrar nombre del visitante
		nombreElement.innerHTML = `<strong class="text-gray-900 dark:text-white">${visitanteNombre}</strong>`;
		
		// Manejar información del vehículo si existe
		if (visitanteData && visitanteData.vehiculo && vehiculoBanner) {
			// Mostrar banner del vehículo
			vehiculoBanner.classList.remove('hidden');
			
			// Llenar información del vehículo
			const placaElement = document.getElementById('confirm-vehiculo-placa');
			const tiempoElement = document.getElementById('confirm-vehiculo-tiempo');
			const costoElement = document.getElementById('confirm-vehiculo-costo');
			
			if (placaElement) placaElement.textContent = visitanteData.vehiculo.placa;
			if (tiempoElement) tiempoElement.textContent = calcularTiempoModal(visitanteData.tiempoEntrada || visitanteData.fechaCreacion);
			if (costoElement) costoElement.textContent = calcularCostoModal(visitanteData);
		} else if (vehiculoBanner) {
			// Ocultar banner si no hay vehículo
			vehiculoBanner.classList.add('hidden');
		}
		
		// Mostrar modal
		modal.classList.remove('hidden');
		
		// Focus en el botón de cancelar por seguridad
		setTimeout(() => {
			const cancelBtn = modal.querySelector('button[onclick="cerrarConfirmModal()"]');
			if (cancelBtn && cancelBtn.focus) {
				cancelBtn.focus();
			}
		}, 100);
	};
	
	// Función para cerrar modal
	window.cerrarConfirmModal = function cerrarConfirmModal() {
		const modal = document.getElementById('confirm-modal');
		const vehiculoBanner = document.getElementById('confirm-vehiculo-banner');
		
		if (modal) {
			modal.classList.add('hidden');
		}
		
		// Ocultar banner del vehículo
		if (vehiculoBanner) {
			vehiculoBanner.classList.add('hidden');
		}
		
		// Limpiar datos pendientes
		pendingSalidaData = null;
	};
	
	// Función para ejecutar la salida confirmada o eliminación
	window.ejecutarSalidaConfirmada = function ejecutarSalidaConfirmada() {
		// Verificar si hay datos pendientes de visitante
		if (pendingSalidaData) {
			const data = pendingSalidaData;
			
			// Cerrar modal
			window.cerrarConfirmModal();
			
			// Ejecutar callback de salida para visitantes
			if (data && data.callback && typeof data.callback === 'function') {
				data.callback(data.id, data.nombre);
			}
		} else if (window.pendingEliminacionData) {
			// Verificar si hay datos pendientes de eliminación de apartamento
			const { callback } = window.pendingEliminacionData;
			window.cerrarConfirmModal();
			if (callback) callback();
			window.pendingEliminacionData = null;
		}
	};
	
	// Cerrar modal con ESC
	document.addEventListener('keydown', (e) => {
		if (e.key === 'Escape') {
			window.cerrarConfirmModal();
		}
	});
</script>
